{
  "address": "0x69906f4e94648F1b419364ae306b4c4e267a4872",
  "abi": [
    {
      "inputs": [],
      "name": "AlreadyMinted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxTokenAlreadySet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAuthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotZeroMint",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OutOfJpegs",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongTransferTo",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "contractURI",
          "type": "string"
        }
      ],
      "name": "NewContractURI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "canEdit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getFeeBps",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getFeeRecipients",
      "outputs": [
        {
          "internalType": "address payable[]",
          "name": "recipients",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getFees",
      "outputs": [
        {
          "internalType": "address payable[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasPerTokenRoyalties",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "contractURI_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "baseURI_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "minter_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "contractRoyaltiesRecipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "contractRoyaltiesValue",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nonce_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "makePermitDigest",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "transferTo",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "mintBatch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "startId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "offsetId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFromWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI_",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "contractURI_",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "setDefaultRoyaltiesRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxSupply_",
          "type": "uint256"
        }
      ],
      "name": "setMaxSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startAtZero",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "bytes3",
          "name": "",
          "type": "bytes3"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7c5c9ecbc7d0d6cda5086985716376e61258b4701affa9671e86f621ab680dba",
  "receipt": {
    "to": null,
    "from": "0x13447c5299E5ABc7b08d93f1451A08252c065ef7",
    "contractAddress": "0x69906f4e94648F1b419364ae306b4c4e267a4872",
    "transactionIndex": 289,
    "gasUsed": "3254755",
    "logsBloom": "0x
    "blockHash": "0x1dec97d504461e2d81e3a8ad14477bcd3f3abee5d7e112de7dd6bbc21cf15007",
    "transactionHash": "0x7c5c9ecbc7d0d6cda5086985716376e61258b4701affa9671e86f621ab680dba",
    "logs": [],
    "blockNumber": 14481086,
    "cumulativeGasUsed": "13522660",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "b2a9555ed8e97279d3715bf9bce5a3d4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AlreadyMinted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxTokenAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotZeroMint\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OutOfJpegs\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongTransferTo\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"contractURI\",\"type\":\"string\"}],\"name\":\"NewContractURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"canEdit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getFeeBps\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getFeeRecipients\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"recipients\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getFees\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasPerTokenRoyalties\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractURI_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minter_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractRoyaltiesRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"contractRoyaltiesValue\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"makePermitDigest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"transferTo\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"mintBatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offsetId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"safeTransferFromWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"contractURI_\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"setDefaultRoyaltiesRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxSupply_\",\"type\":\"uint256\"}],\"name\":\"setMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAtZero\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"bytes3\",\"name\":\"\",\"type\":\"bytes3\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Simon Fremaux (@dievardump)\",\"details\":\"This is a \\\"slim\\\" version of an ERC721 for NiftyForge      Slim ERC721 do not have all the bells and whistle (no roles, no modules, no events)      Slim is mostly made for series (Generative stuff, Series with incremntial token ids, PFPs...)      or for controlled env      The mint starts from 1 (or 0) and goes up, until maxTokenId      If a minter is set at initialisation, only this address can mint. forever.      else, only the owner can mint.      royalties are not managed per item, but are contract wide.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Return the DOMAIN_SEPARATOR.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator.\"},\"canEdit(address)\":{\"params\":{\"account\":\"the address to check\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"initialize(string,string,string,string,address,address,address,uint256)\":{\"params\":{\"baseURI_\":\"the contract baseURI (if there is)  - can be empty \\\"\\\"\",\"contractRoyaltiesRecipient\":\"the recipient, if the contract has \\\"contract wide royalties\\\"\",\"contractRoyaltiesValue\":\"the value, modules to add / enable directly at creation\",\"contractURI_\":\"The contract URI (containing its metadata) - can be empty \\\"\\\"\",\"minter_\":\"The address that has the right to mint on the collection\",\"name_\":\"name of the contract (see ERC721)\",\"owner_\":\"Address to whom transfer ownership\",\"symbol_\":\"symbol of the contract (see ERC721)\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mint(address)\":{\"params\":{\"to\":\"the recipient\"},\"returns\":{\"tokenId\":\"the tokenId minted\"}},\"mint(address,address)\":{\"params\":{\"to\":\"the first recipient\",\"transferTo\":\"the end recipient\"},\"returns\":{\"tokenId\":\"the tokenId minted\"}},\"mintBatch(address,uint256)\":{\"params\":{\"to\":\"array of address of recipients\"},\"returns\":{\"startId\":\"and endId\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"nonce(uint256)\":{\"params\":{\"tokenId\":\"token id\"},\"returns\":{\"_0\":\"current nonce\"}},\"nonces(uint256)\":{\"params\":{\"tokenId\":\"token id\"},\"returns\":{\"_0\":\"current nonce\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"permit(address,uint256,uint256,bytes)\":{\"details\":\"Anyone can call this to approve `spender`, even a third-party\",\"params\":{\"deadline\":\"the deadline for the permit to be used\",\"signature\":\"permit\",\"spender\":\"the actor to approve\",\"tokenId\":\"the token id\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"royaltyInfo(uint256,uint256)\":{\"params\":{\"_tokenId\":\"- the NFT asset queried for royalty information\",\"_value\":\"- the sale price of the NFT asset specified by _tokenId\"},\"returns\":{\"receiver\":\"- address of who should be sent the royalty payment\",\"royaltyAmount\":\"- the royalty payment amount for value sale price\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFromWithPermit(address,address,uint256,bytes,uint256,bytes)\":{\"details\":\"this supposes that the permit is for msg.sender\",\"params\":{\"_data\":\"optional data to add\",\"deadline\":\"the deadline for the permit to be used\",\"from\":\"current owner\",\"signature\":\"of permit\",\"to\":\"recipient\",\"tokenId\":\"the token id\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setBaseURI(string)\":{\"details\":\"only an editor can do that (account or module)\",\"params\":{\"baseURI_\":\"the new base token uri used in tokenURI()\"}},\"setContractURI(string)\":{\"details\":\"needs to be owner\",\"params\":{\"contractURI_\":\"new contract URI\"}},\"setDefaultRoyaltiesRecipient(address)\":{\"details\":\"an editor can call this\",\"params\":{\"recipient\":\"new default royalties recipient\"}},\"setMaxSupply(uint256)\":{\"details\":\"be careful, this is a one time call function.      When set, the maxSupply can not be reverted nor changed\",\"params\":{\"maxSupply_\":\"the max supply for this contract\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"This function will first check if the minter is an INFModuleTokenURI      if yes, tries to get the tokenURI from it      else it lets the tokenURI be built as usual using _baseURI\",\"params\":{\"tokenId\":\"the tokenId\"},\"returns\":{\"uri\":\"the tokenURI\"}},\"totalSupply()\":{\"returns\":{\"_0\":\"the current total supply\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"version()\":{\"returns\":{\"_0\":\"the current implementation version following the scheme 0x[erc][type][version] erc: 00 => ERC721 | 01 => ERC1155 type: 00 => full | 01 => slim version: 00, 01, 02, 03...\"}},\"withdraw(address,uint256,uint256)\":{\"params\":{\"amount\":\"the amount to withdraw if native token, erc20 or erc1155 - must be 0 for ERC721\",\"token\":\"the token to withdraw from. address(0) means native chain token\",\"tokenId\":\"the tokenId to withdraw for ERC1155 and ERC721\"}}},\"title\":\"NiftyForge721Slim\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"canEdit(address)\":{\"notice\":\"Helper to know if an address can do the action an Editor can\"},\"contractURI()\":{\"notice\":\"contract URI (collection description)\"},\"getFeeBps(uint256)\":{\"notice\":\"see\\tIRaribleSecondarySales\"},\"getFeeRecipients(uint256)\":{\"notice\":\"see\\tIRaribleSecondarySales\"},\"initialize(string,string,string,string,address,address,address,uint256)\":{\"notice\":\"this is the constructor of the contract, called at the time of creation         Although it uses what are called upgradeable contracts, this is only to         be able to make deployment cheap using a Proxy but NiftyForge contracts         ARE NOT UPGRADEABLE => the proxy used is not an upgradeable proxy, the implementation is immutable\"},\"maxSupply()\":{\"notice\":\"maximum tokens that can be created on this contract\"},\"mint(address)\":{\"notice\":\"Mint one token to `to`\"},\"mint(address,address)\":{\"notice\":\"Mint one token to `to` and transfers to `transferTo`\"},\"mintBatch(address,uint256)\":{\"notice\":\"Mint `count` tokens to `to`\"},\"minted()\":{\"notice\":\"how many were minted so far\"},\"minter()\":{\"notice\":\"the only address that can mint on this collection. It can never be changed\"},\"nonce(uint256)\":{\"notice\":\"Allows to retrieve current nonce for token\"},\"nonces(uint256)\":{\"notice\":\"Allows to retrieve current nonce for token\"},\"offsetId()\":{\"notice\":\"offset used to start token id at 0 if needed\"},\"permit(address,uint256,uint256,bytes)\":{\"notice\":\"function to be called by anyone to approve `spender` using a Permit signature\"},\"safeTransferFromWithPermit(address,address,uint256,bytes,uint256,bytes)\":{\"notice\":\"Allows to get approved using a permit and transfer in the same call\"},\"setBaseURI(string)\":{\"notice\":\"Set the base token URI\"},\"setContractURI(string)\":{\"notice\":\"Helper for the owner of the contract to set the new contract URI\"},\"setDefaultRoyaltiesRecipient(address)\":{\"notice\":\"Allows to change the default royalties recipient\"},\"setMaxSupply(uint256)\":{\"notice\":\"allows owner to set maxsupply\"},\"startAtZero()\":{\"notice\":\"This function allows to offset the next id in order to start ids at 0\"},\"tokenURI(uint256)\":{\"notice\":\"returns a tokenURI\"},\"totalSupply()\":{\"notice\":\"Since this contract can only mint in sequence, we can keep track of totalSupply easily\"},\"version()\":{\"notice\":\"getter for the version of the implementation\"},\"withdraw(address,uint256,uint256)\":{\"notice\":\"This is a generic function that allows this contract's owner to withdraw         any balance / ERC20 / ERC721 / ERC1155 it can have         this contract has no payable nor receive function so it should not get any nativ token         but this could save some ERC20, 721 or 1155\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NiftyForge721Slim.sol\":\"NiftyForge721Slim\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1271Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271Upgradeable {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x22689244b763a972d78881b8a35fc8a2df8488c63c6e45fa90a5780f0474590a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x06971bd1720c85e4771b94c83eb1e058af6070f6f6306ebc874a11501b238b8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf449ca0a763d4b1b4462cf8706857074492f324020a2b9d099181b5383055ad3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x56f89378fca44345fe8de632c70311052c39d64a7a710513316676d343380e68\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x3d03f5cb8b9f17b75c3b6eb4921b1fe7b87ed77cf0c8638496eee5183a5101e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfbb3ca7272af58dc245a20e91a1f68481ee04706fa3fe46d184000efc21f4bad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\\n */\\nabstract contract ERC721BurnableUpgradeable is Initializable, ContextUpgradeable, ERC721Upgradeable {\\n    function __ERC721Burnable_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721Burnable_init_unchained();\\n    }\\n\\n    function __ERC721Burnable_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721Burnable: caller is not owner nor approved\\\");\\n        _burn(tokenId);\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xe2a579e3c0d885b5a230215af8964922bb6cea9c3cc2c96cd035dc84c063f276\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6dd43e44dbaad99d1863be7f2837085f361efdcb1fde5a9bf84c4efa07f89ed3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x946f08c0a132c5877d458d7af7956da60607f20a5c03dd75760708c848aae6b7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x07411372282794f7ecde69a1065e5d20441abe7c9f8861437b4d45c9a4712fa6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/SignatureCheckerUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../AddressUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1271Upgradeable.sol\\\";\\n\\n/**\\n * @dev Signature verification helper: Provide a single mechanism to verify both private-key (EOA) ECDSA signature and\\n * ERC1271 contract sigantures. Using this instead of ECDSA.recover in your contract will make them compatible with\\n * smart contract wallets such as Argent and Gnosis.\\n *\\n * Note: unlike ECDSA signatures, contract signature's are revocable, and the outcome of this function can thus change\\n * through time. It could return true at block N and false at block N+1 (or the opposite).\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureCheckerUpgradeable {\\n    function isValidSignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (address recovered, ECDSAUpgradeable.RecoverError error) = ECDSAUpgradeable.tryRecover(hash, signature);\\n        if (error == ECDSAUpgradeable.RecoverError.NoError && recovered == signer) {\\n            return true;\\n        }\\n\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271Upgradeable.isValidSignature.selector, hash, signature)\\n        );\\n        return (success && result.length == 32 && abi.decode(result, (bytes4)) == IERC1271Upgradeable.isValidSignature.selector);\\n    }\\n}\\n\",\"keccak256\":\"0x771d09c02e590f3779de6c4781f4fbecb3e5231c402e79af4870824806c35c9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"contracts/INiftyForge721Slim.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport './NFT/IERC721Slim.sol';\\n\\n/// @title INiftyForge721Slim\\n/// @author Simon Fremaux (@dievardump)\\ninterface INiftyForge721Slim is IERC721Slim {\\n    /// @notice this is the constructor of the contract, called at the time of creation\\n    ///         Although it uses what are called upgradeable contracts, this is only to\\n    ///         be able to make deployment cheap using a Proxy but NiftyForge contracts\\n    ///         ARE NOT UPGRADEABLE => the proxy used is not an upgradeable proxy, the implementation is immutable\\n    /// @param name_ name of the contract (see ERC721)\\n    /// @param symbol_ symbol of the contract (see ERC721)\\n    /// @param contractURI_ The contract URI (containing its metadata) - can be empty \\\"\\\"\\n    /// @param baseURI_ the contract baseURI (if there is)  - can be empty \\\"\\\"\\n    /// @param owner_ Address to whom transfer ownership\\n    /// @param minter_ The address that has the right to mint on this contract\\n    /// @param contractRoyaltiesRecipient the recipient, if the contract has \\\"contract wide royalties\\\"\\n    /// @param contractRoyaltiesValue the value, modules to add / enable directly at creation\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        string memory contractURI_,\\n        string memory baseURI_,\\n        address owner_,\\n        address minter_,\\n        address contractRoyaltiesRecipient,\\n        uint256 contractRoyaltiesValue\\n    ) external;\\n\\n    /// @notice getter for the version of the implementation\\n    /// @return the current implementation version following the scheme 0x[erc][type][version]\\n    /// erc: 00 => ERC721 | 01 => ERC1155\\n    /// type: 00 => full | 01 => slim\\n    /// version: 00, 01, 02, 03...\\n    function version() external view returns (bytes3);\\n\\n    /// @notice the module/address that can mint on this contract (if address(0) then owner())\\n    function minter() external view returns (address);\\n\\n    /// @notice how many tokens exists\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @notice how many tokens have been minted\\n    function minted() external view returns (uint256);\\n\\n    /// @notice maximum tokens that can be created on this contract\\n    function maxSupply() external view returns (uint256);\\n\\n    /// @notice Mint one token to `to`\\n    /// @param to the recipient\\n    /// @return tokenId the tokenId minted\\n    function mint(address to) external returns (uint256 tokenId);\\n\\n    /// @notice Mint one token to `to` and transfers to `transferTo`\\n    /// @param to the first recipient\\n    /// @param transferTo the end recipient\\n    /// @return tokenId the tokenId minted\\n    function mint(address to, address transferTo)\\n        external\\n        returns (uint256 tokenId);\\n\\n    /// @notice Mint `count` tokens to `to`\\n    /// @param to array of address of recipients\\n    /// @return startId and endId\\n    function mintBatch(address to, uint256 count)\\n        external\\n        returns (uint256 startId, uint256 endId);\\n}\\n\",\"keccak256\":\"0x0ed22199444566dec5bc39fd56b6cabd242cea11890a9044aa36cad1656b4a10\",\"license\":\"MIT\"},\"contracts/Modules/INFModuleTokenURI.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface INFModuleTokenURI {\\n    function tokenURI(address registry, uint256 tokenId)\\n        external\\n        view\\n        returns (string memory);\\n}\\n\",\"keccak256\":\"0x766fade8a31feed2911432abb52e6c8d945fca1d615a75e6418561157f368c01\",\"license\":\"MIT\"},\"contracts/Modules/INFModuleWithRoyalties.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface INFModuleWithRoyalties {\\n    /// @notice Return royalties (recipient, basisPoint) for tokenId\\n    /// @dev Contrary to EIP2981, modules are expected to return basisPoint for second parameters\\n    ///      This in order to allow right royalties on marketplaces not supporting 2981 (like Rarible)\\n    /// @param registry registry to check id of\\n    /// @param tokenId token to check\\n    /// @return recipient and basisPoint for this tokenId\\n    function royaltyInfo(address registry, uint256 tokenId)\\n        external\\n        view\\n        returns (address recipient, uint256 basisPoint);\\n}\\n\",\"keccak256\":\"0xe89083a3b5d5cbce81ba445a053620eccd5dafd6f5081b8f5eecdfea701dc133\",\"license\":\"MIT\"},\"contracts/NFT/ERC721/ERC721WithPermit.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/SignatureCheckerUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\n\\n/// @title ERC721WithPermit\\n/// @author Simon Fremaux (@dievardump)\\n/// @notice This implementation differs from what I can see everywhere else\\n///         My take on Permits for NFTs is that the nonce should be linked to the tokens\\n///         and not to an owner.\\n///         Whenever a token is transfered, its nonce should increase.\\n///         This allows to emit a lot of Permit (for sales for example) but ensure they\\n///         will get invalidated after the token is transfered\\n///         This also allows an owner to emit several Permit on different tokens\\n///         and not have Permit to be used one after the other\\n///         Example:\\n///         An owner sign a Permit of sale on OpenSea and on Rarible at the same time\\n///         Only the first one that will sell the item will be able to use the permit\\n///         The nonce being incremented, this Permits won't be usable anymore\\nabstract contract ERC721WithPermit is ERC721Upgradeable {\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        keccak256(\\n            \\\"Permit(address spender,uint256 tokenId,uint256 nonce,uint256 deadline)\\\"\\n        );\\n\\n    bytes32 private _deploymentDomainSeparator;\\n    uint256 private _deploymentChainId;\\n\\n    mapping(uint256 => uint256) private _nonces;\\n\\n    // function to initialize the contract\\n    function __ERC721WithPermit_init() internal {\\n        uint256 chainId;\\n        //solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            chainId := chainid()\\n        }\\n\\n        _deploymentChainId = chainId;\\n        _deploymentDomainSeparator = _calculateDomainSeparator(chainId);\\n    }\\n\\n    /// @dev Return the DOMAIN_SEPARATOR.\\n    function DOMAIN_SEPARATOR() public view returns (bytes32) {\\n        uint256 chainId;\\n        //solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            chainId := chainid()\\n        }\\n\\n        // in case a fork happen, to support the chain that had to change its chainId,, we compute the domain operator\\n        return\\n            chainId == _deploymentChainId\\n                ? _deploymentDomainSeparator\\n                : _calculateDomainSeparator(chainId);\\n    }\\n\\n    /// @notice Allows to retrieve current nonce for token\\n    /// @param tokenId token id\\n    /// @return current nonce\\n    function nonce(uint256 tokenId) public view returns (uint256) {\\n        require(_exists(tokenId), \\\"!UNKNOWN_TOKEN!\\\");\\n        return _nonces[tokenId];\\n    }\\n\\n    /// @notice Allows to retrieve current nonce for token\\n    /// @param tokenId token id\\n    /// @return current nonce\\n    function nonces(uint256 tokenId) public view returns (uint256) {\\n        return nonce(tokenId);\\n    }\\n\\n    function makePermitDigest(\\n        address spender,\\n        uint256 tokenId,\\n        uint256 nonce_,\\n        uint256 deadline\\n    ) public view returns (bytes32) {\\n        return\\n            ECDSAUpgradeable.toTypedDataHash(\\n                DOMAIN_SEPARATOR(),\\n                keccak256(\\n                    abi.encode(\\n                        PERMIT_TYPEHASH,\\n                        spender,\\n                        tokenId,\\n                        nonce_,\\n                        deadline\\n                    )\\n                )\\n            );\\n    }\\n\\n    /// @notice function to be called by anyone to approve `spender` using a Permit signature\\n    /// @dev Anyone can call this to approve `spender`, even a third-party\\n    /// @param spender the actor to approve\\n    /// @param tokenId the token id\\n    /// @param deadline the deadline for the permit to be used\\n    /// @param signature permit\\n    function permit(\\n        address spender,\\n        uint256 tokenId,\\n        uint256 deadline,\\n        bytes memory signature\\n    ) public {\\n        require(deadline >= block.timestamp, \\\"!PERMIT_DEADLINE_EXPIRED!\\\");\\n\\n        // this will revert if token is burned\\n        address owner_ = ownerOf(tokenId);\\n\\n        bytes32 digest = makePermitDigest(\\n            spender,\\n            tokenId,\\n            _nonces[tokenId],\\n            deadline\\n        );\\n\\n        (address recoveredAddress, ) = ECDSAUpgradeable.tryRecover(\\n            digest,\\n            signature\\n        );\\n        require(\\n            (\\n                // no need to check for recoveredAddress == 0\\n                // because if it's 0, it won't work\\n                (recoveredAddress == owner_ ||\\n                    isApprovedForAll(owner_, recoveredAddress))\\n            ) ||\\n                // if owner is a contract, try to recover signature using SignatureChecker\\n                SignatureCheckerUpgradeable.isValidSignatureNow(\\n                    owner_,\\n                    digest,\\n                    signature\\n                ),\\n            \\\"!INVALID_PERMIT_SIGNATURE!\\\"\\n        );\\n\\n        _approve(spender, tokenId);\\n    }\\n\\n    /// @dev returns the domain separator for `chainId`\\n    /// @param chainId the chain id\\n    function _calculateDomainSeparator(uint256 chainId)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\n                        \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n                    ),\\n                    keccak256(bytes(name())),\\n                    keccak256(bytes(\\\"1\\\")),\\n                    chainId,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /// @dev helper to easily increment a nonce for a given tokenId\\n    /// @param tokenId the tokenId to increment the nonce for\\n    function _incrementNonce(uint256 tokenId) internal {\\n        _nonces[tokenId]++;\\n    }\\n\\n    /// @dev _transfer override to be able to increment the nonce\\n    /// @inheritdoc ERC721Upgradeable\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        // increment the permit nonce linked to this tokenId.\\n        // this will ensure that a Permit can not be used on a token\\n        // if it were to leave the owner's hands and come back later\\n        // this if saves 20k on the mint, which is already expensive enough\\n        if (from != address(0)) {\\n            _incrementNonce(tokenId);\\n        }\\n\\n        super._transfer(from, to, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xe80555d9d0c20e8512cdbfc9da6707a396633e534913560af3873f63031dd74f\",\"license\":\"MIT\"},\"contracts/NFT/ERC721/ERC721WithRoyalties.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport '../Royalties/ERC2981/ERC2981Royalties.sol';\\nimport '../Royalties/RaribleSecondarySales/IRaribleSecondarySales.sol';\\n\\nimport '../Royalties/FoundationSecondarySales/IFoundationSecondarySales.sol';\\nimport './IERC721WithRoyalties.sol';\\n\\n/// @dev This is a contract used for royalties on various platforms\\n/// @author Simon Fremaux (@dievardump)\\ncontract ERC721WithRoyalties is ERC2981Royalties {\\n    /// see\\tIRaribleSecondarySales\\n    function getFeeRecipients(uint256 tokenId)\\n        public\\n        view\\n        returns (address payable[] memory recipients)\\n    {\\n        // using ERC2981 implementation to get the recipient & amount\\n        (address recipient, uint256 amount) = _getTokenRoyalty(tokenId);\\n        if (amount != 0) {\\n            recipients = new address payable[](1);\\n            recipients[0] = payable(recipient);\\n        }\\n    }\\n\\n    /// see\\tIRaribleSecondarySales\\n    function getFeeBps(uint256 tokenId)\\n        public\\n        view\\n        returns (uint256[] memory fees)\\n    {\\n        // using ERC2981 implementation to get the amount\\n        (, uint256 amount) = _getTokenRoyalty(tokenId);\\n        if (amount != 0) {\\n            fees = new uint256[](1);\\n            fees[0] = amount;\\n        }\\n    }\\n\\n    // see IFoundationSecondarySales\\n    function getFees(uint256 tokenId)\\n        external\\n        view\\n        virtual\\n        returns (address payable[] memory recipients, uint256[] memory fees)\\n    {\\n        // using ERC2981 implementation to get the recipient & amount\\n        (address recipient, uint256 amount) = _getTokenRoyalty(tokenId);\\n        if (amount != 0) {\\n            recipients = new address payable[](1);\\n            recipients[0] = payable(recipient);\\n\\n            fees = new uint256[](1);\\n            fees[0] = amount;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x48e43891826511e108e520d4e08b8ee08215d212d91da6d7b0c07cc5e2ccb4f0\",\"license\":\"MIT\"},\"contracts/NFT/ERC721/IERC4494.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n///\\n/// @dev Interface for token permits for ERC-721\\n///\\ninterface IERC4494 is IERC165Upgradeable {\\n    /// ERC165 bytes to add to interface array - set in parent contract\\n    ///\\n    /// _INTERFACE_ID_ERC4494 = 0x5604e225\\n\\n    /// @notice Function to approve by way of owner signature\\n    /// @param spender the address to approve\\n    /// @param tokenId the index of the NFT to approve the spender on\\n    /// @param deadline a timestamp expiry for the permit\\n    /// @param sig a traditional or EIP-2098 signature\\n    function permit(\\n        address spender,\\n        uint256 tokenId,\\n        uint256 deadline,\\n        bytes memory sig\\n    ) external;\\n\\n    /// @notice Returns the nonce of an NFT - useful for creating permits\\n    /// @param tokenId the index of the NFT to get the nonce of\\n    /// @return the uint256 representation of the nonce\\n    function nonces(uint256 tokenId) external view returns (uint256);\\n\\n    /// @notice Returns the domain separator used in the encoding of the signature for permits, as defined by EIP-712\\n    /// @return the bytes32 domain separator\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x54aacd7a2825d8d15207d3c484d29ad933dde9b43464fae4e80a3b6658e91076\",\"license\":\"MIT\"},\"contracts/NFT/ERC721/IERC721WithRoyalties.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport '../Royalties/ERC2981/IERC2981Royalties.sol';\\nimport '../Royalties/RaribleSecondarySales/IRaribleSecondarySales.sol';\\nimport '../Royalties/FoundationSecondarySales/IFoundationSecondarySales.sol';\\n\\n/// @dev This is a contract used for royalties on various platforms\\n/// @author Simon Fremaux (@dievardump)\\ninterface IERC721WithRoyalties is\\n    IERC2981Royalties,\\n    IRaribleSecondarySales,\\n    IFoundationSecondarySales\\n{\\n\\n}\\n\",\"keccak256\":\"0xaf0179761614e73c0bd125004b180df9c334cb48102b3a9efe7250d8f8b64530\",\"license\":\"MIT\"},\"contracts/NFT/ERC721Slim.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nimport \\\"./ERC721/ERC721WithRoyalties.sol\\\";\\nimport \\\"./ERC721/ERC721WithPermit.sol\\\";\\nimport \\\"./ERC721/IERC4494.sol\\\";\\n\\n/// @title ERC721Slim\\n/// @dev This is a \\\"slim\\\" version of an ERC721 for NiftyForge\\n///      Slim ERC721 do not have all the bells and whistle that the ERC721Full have\\n///      Slim is made for series (like PFPs or Generative series)\\n///      The mint starts from 1 and ups\\n///      Not even the owner can mint directly on this collection.\\n///      It has to be the module passed as initialization\\n/// @author Simon Fremaux (@dievardump)\\nabstract contract ERC721Slim is\\n    OwnableUpgradeable,\\n    ERC721Upgradeable,\\n    ERC721BurnableUpgradeable,\\n    ERC721WithRoyalties,\\n    ERC721WithPermit\\n{\\n    event NewContractURI(string contractURI);\\n\\n    // base token uri\\n    string public baseURI;\\n\\n    /// @notice contract URI (collection description)\\n    string public contractURI;\\n\\n    /// @notice constructor\\n    /// @param name_ name of the contract (see ERC721)\\n    /// @param symbol_ symbol of the contract (see ERC721)\\n    /// @param contractURI_ The contract URI (containing its metadata) - can be empty \\\"\\\"\\n    /// @param baseURI_ the contract baseURI (if there is)  - can be empty \\\"\\\"\\n    /// @param owner_ Address to whom transfer ownership (can be address(0), then owner is deployer)\\n    function __ERC721Slim__init(\\n        string memory name_,\\n        string memory symbol_,\\n        string memory contractURI_,\\n        string memory baseURI_,\\n        address owner_\\n    ) internal {\\n        __Ownable_init();\\n        __ERC721_init_unchained(name_, symbol_);\\n\\n        __ERC721WithPermit_init();\\n\\n        // set contract uri if present\\n        if (bytes(contractURI_).length > 0) {\\n            contractURI = contractURI_;\\n        }\\n\\n        // set base uri if present\\n        if (bytes(baseURI_).length > 0) {\\n            baseURI = baseURI_;\\n        }\\n\\n        if (address(0) != owner_) {\\n            transferOwnership(owner_);\\n        }\\n    }\\n\\n    // receive() external payable {}\\n\\n    /// @notice This is a generic function that allows this contract's owner to withdraw\\n    ///         any balance / ERC20 / ERC721 / ERC1155 it can have\\n    ///         this contract has no payable nor receive function so it should not get any nativ token\\n    ///         but this could save some ERC20, 721 or 1155\\n    /// @param token the token to withdraw from. address(0) means native chain token\\n    /// @param amount the amount to withdraw if native token, erc20 or erc1155 - must be 0 for ERC721\\n    /// @param tokenId the tokenId to withdraw for ERC1155 and ERC721\\n    function withdraw(\\n        address token,\\n        uint256 amount,\\n        uint256 tokenId\\n    ) external onlyOwner {\\n        if (token == address(0)) {\\n            require(\\n                amount == 0 || address(this).balance >= amount,\\n                \\\"!WRONG_VALUE!\\\"\\n            );\\n            (bool success, ) = msg.sender.call{value: amount}(\\\"\\\");\\n            require(success, \\\"!TRANSFER_FAILED!\\\");\\n        } else {\\n            // if token is ERC1155\\n            if (\\n                IERC165Upgradeable(token).supportsInterface(\\n                    type(IERC1155Upgradeable).interfaceId\\n                )\\n            ) {\\n                IERC1155Upgradeable(token).safeTransferFrom(\\n                    address(this),\\n                    msg.sender,\\n                    tokenId,\\n                    amount,\\n                    \\\"\\\"\\n                );\\n            } else if (\\n                IERC165Upgradeable(token).supportsInterface(\\n                    type(IERC721Upgradeable).interfaceId\\n                )\\n            ) {\\n                //else if ERC721\\n                IERC721Upgradeable(token).safeTransferFrom(\\n                    address(this),\\n                    msg.sender,\\n                    tokenId,\\n                    \\\"\\\"\\n                );\\n            } else {\\n                // we consider it's an ERC20\\n                require(\\n                    IERC20Upgradeable(token).transfer(msg.sender, amount),\\n                    \\\"!TRANSFER_FAILED!\\\"\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc\\tERC165Upgradeable\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        // all moved here to have less \\\"jumps\\\" when checking an interface\\n        return\\n            interfaceId == type(IERC2981Royalties).interfaceId ||\\n            interfaceId == type(IRaribleSecondarySales).interfaceId ||\\n            interfaceId == type(IFoundationSecondarySales).interfaceId ||\\n            interfaceId == type(IERC4494).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /// @notice Helper to know if an address can do the action an Editor can\\n    /// @param account the address to check\\n    function canEdit(address account) public view virtual returns (bool) {\\n        return owner() == account;\\n    }\\n\\n    /// @notice Allows to get approved using a permit and transfer in the same call\\n    /// @dev this supposes that the permit is for msg.sender\\n    /// @param from current owner\\n    /// @param to recipient\\n    /// @param tokenId the token id\\n    /// @param _data optional data to add\\n    /// @param deadline the deadline for the permit to be used\\n    /// @param signature of permit\\n    function safeTransferFromWithPermit(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data,\\n        uint256 deadline,\\n        bytes memory signature\\n    ) external {\\n        // use the permit to get msg.sender approved\\n        permit(msg.sender, tokenId, deadline, signature);\\n\\n        // do the transfer\\n        safeTransferFrom(from, to, tokenId, _data);\\n    }\\n\\n    /// @notice Set the base token URI\\n    /// @dev only an editor can do that (account or module)\\n    /// @param baseURI_ the new base token uri used in tokenURI()\\n    function setBaseURI(string memory baseURI_) external onlyOwner {\\n        baseURI = baseURI_;\\n    }\\n\\n    /// @notice Allows to change the default royalties recipient\\n    /// @dev an editor can call this\\n    /// @param recipient new default royalties recipient\\n    function setDefaultRoyaltiesRecipient(address recipient)\\n        external\\n        onlyOwner\\n    {\\n        require(!hasPerTokenRoyalties(), \\\"!PER_TOKEN_ROYALTIES!\\\");\\n        _setDefaultRoyaltiesRecipient(recipient);\\n    }\\n\\n    /// @notice Helper for the owner of the contract to set the new contract URI\\n    /// @dev needs to be owner\\n    /// @param contractURI_ new contract URI\\n    function setContractURI(string memory contractURI_) external onlyOwner {\\n        contractURI = contractURI_;\\n    }\\n\\n    /// @inheritdoc ERC721Upgradeable\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override(ERC721Upgradeable, ERC721WithPermit) {\\n        super._transfer(from, to, tokenId);\\n    }\\n\\n    /// @inheritdoc\\tERC721Upgradeable\\n    function _burn(uint256 tokenId) internal virtual override {\\n        // remove royalties\\n        _removeRoyalty(tokenId);\\n\\n        // burn ERC721URIStorage\\n        super._burn(tokenId);\\n    }\\n\\n    /// @inheritdoc\\tERC721Upgradeable\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return baseURI;\\n    }\\n}\\n\",\"keccak256\":\"0x187f52c74263e96a738e0e17b53b329c91580fbe01d48dc4fe97cf1f9cb679e1\",\"license\":\"MIT\"},\"contracts/NFT/IERC721Slim.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol';\\nimport './ERC721/IERC721WithRoyalties.sol';\\n\\n/// @title ERC721Slim\\n/// @dev This is a \\\"slim\\\" version of an ERC721 for NiftyForge\\n///      Slim ERC721 do not have all the bells and whistle that the ERC721Full have\\n///      Slim is made for series (like PFPs or Generative series)\\n///      The mint starts from 1 and ups\\n///      Not even the owner can mint directly on this collection.\\n///      It has to be the module passed as initialization\\n/// @author Simon Fremaux (@dievardump)\\ninterface IERC721Slim is IERC721Upgradeable, IERC721WithRoyalties {\\n    function baseURI() external view returns (string memory);\\n\\n    function contractURI() external view returns (string memory);\\n\\n    // receive() external payable {}\\n\\n    /// @notice This is a generic function that allows this contract's owner to withdraw\\n    ///         any balance / ERC20 / ERC721 / ERC1155 it can have\\n    ///         this contract has no payable nor receive function so it should not get any nativ token\\n    ///         but this could save some ERC20, 721 or 1155\\n    /// @param token the token to withdraw from. address(0) means native chain token\\n    /// @param amount the amount to withdraw if native token, erc20 or erc1155 - must be 0 for ERC721\\n    /// @param tokenId the tokenId to withdraw for ERC1155 and ERC721\\n    function withdraw(\\n        address token,\\n        uint256 amount,\\n        uint256 tokenId\\n    ) external;\\n\\n    /// @notice Helper to know if an address can do the action an Editor can\\n    /// @param account the address to check\\n    function canEdit(address account) external view returns (bool);\\n\\n    /// @notice Allows to get approved using a permit and transfer in the same call\\n    /// @dev this supposes that the permit is for msg.sender\\n    /// @param from current owner\\n    /// @param to recipient\\n    /// @param tokenId the token id\\n    /// @param _data optional data to add\\n    /// @param deadline the deadline for the permit to be used\\n    /// @param signature of permit\\n    function safeTransferFromWithPermit(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data,\\n        uint256 deadline,\\n        bytes memory signature\\n    ) external;\\n\\n    /// @notice Set the base token URI\\n    /// @dev only an editor can do that (account or module)\\n    /// @param baseURI_ the new base token uri used in tokenURI()\\n    function setBaseURI(string memory baseURI_) external;\\n\\n    /// @notice Allows to change the default royalties recipient\\n    /// @dev an editor can call this\\n    /// @param recipient new default royalties recipient\\n    function setDefaultRoyaltiesRecipient(address recipient) external;\\n\\n    /// @notice Helper for the owner of the contract to set the new contract URI\\n    /// @dev needs to be owner\\n    /// @param contractURI_ new contract URI\\n    function setContractURI(string memory contractURI_) external;\\n}\\n\",\"keccak256\":\"0x8257498d97f62c078d667104637ff5ff18731a8c00e53ddb53178efd34541643\",\"license\":\"MIT\"},\"contracts/NFT/Royalties/ERC2981/ERC2981Royalties.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport './IERC2981Royalties.sol';\\n\\n/// @dev This is a contract used to add ERC2981 support to ERC721 and 1155\\nabstract contract ERC2981Royalties is IERC2981Royalties {\\n    struct RoyaltyData {\\n        address recipient;\\n        uint96 amount;\\n    }\\n\\n    // this variable is set to true, whenever \\\"contract wide\\\" royalties are set\\n    // this can not be undone and this takes precedence to any other royalties already set.\\n    bool private _useContractRoyalties;\\n\\n    // those are the \\\"contract wide\\\" royalties, used for collections that all pay royalties to\\n    // the same recipient, with the same value\\n    // once set, like any other royalties, it can not be modified\\n    RoyaltyData private _contractRoyalties;\\n\\n    mapping(uint256 => RoyaltyData) private _royalties;\\n\\n    function hasPerTokenRoyalties() public view returns (bool) {\\n        return !_useContractRoyalties;\\n    }\\n\\n    /// @inheritdoc\\tIERC2981Royalties\\n    function royaltyInfo(uint256 tokenId, uint256 value)\\n        public\\n        view\\n        override\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        // get base values\\n        (receiver, royaltyAmount) = _getTokenRoyalty(tokenId);\\n\\n        // calculate due amount\\n        if (royaltyAmount != 0) {\\n            royaltyAmount = (value * royaltyAmount) / 10000;\\n        }\\n    }\\n\\n    /// @dev Sets token royalties\\n    /// @param id the token id fir which we register the royalties\\n    function _removeRoyalty(uint256 id) internal {\\n        delete _royalties[id];\\n    }\\n\\n    /// @dev Sets token royalties\\n    /// @param id the token id for which we register the royalties\\n    /// @param recipient recipient of the royalties\\n    /// @param value percentage (using 2 decimals - 10000 = 100, 0 = 0)\\n    function _setTokenRoyalty(\\n        uint256 id,\\n        address recipient,\\n        uint256 value\\n    ) internal {\\n        // you can't set per token royalties if using \\\"contract wide\\\" ones\\n        require(\\n            !_useContractRoyalties,\\n            '!ERC2981Royalties:ROYALTIES_CONTRACT_WIDE!'\\n        );\\n        require(value <= 10000, '!ERC2981Royalties:TOO_HIGH!');\\n\\n        _royalties[id] = RoyaltyData(recipient, uint96(value));\\n    }\\n\\n    /// @dev Gets token royalties\\n    /// @param id the token id for which we check the royalties\\n    function _getTokenRoyalty(uint256 id)\\n        internal\\n        view\\n        virtual\\n        returns (address, uint256)\\n    {\\n        RoyaltyData memory data;\\n        if (_useContractRoyalties) {\\n            data = _contractRoyalties;\\n        } else {\\n            data = _royalties[id];\\n        }\\n\\n        return (data.recipient, uint256(data.amount));\\n    }\\n\\n    /// @dev set contract royalties;\\n    ///      This can only be set once, because we are of the idea that royalties\\n    ///      Amounts should never change after they have been set\\n    ///      Once default values are set, it will be used for all royalties inquiries\\n    /// @param recipient the default royalties recipient\\n    /// @param value the default royalties value\\n    function _setDefaultRoyalties(address recipient, uint256 value) internal {\\n        require(\\n            _useContractRoyalties == false,\\n            '!ERC2981Royalties:DEFAULT_ALREADY_SET!'\\n        );\\n        require(value <= 10000, '!ERC2981Royalties:TOO_HIGH!');\\n        _useContractRoyalties = true;\\n        _contractRoyalties = RoyaltyData(recipient, uint96(value));\\n    }\\n\\n    /// @dev allows to set the default royalties recipient\\n    /// @param recipient the new recipient\\n    function _setDefaultRoyaltiesRecipient(address recipient) internal {\\n        _contractRoyalties.recipient = recipient;\\n    }\\n\\n    /// @dev allows to set a tokenId royalties recipient\\n    /// @param tokenId the token Id\\n    /// @param recipient the new recipient\\n    function _setTokenRoyaltiesRecipient(uint256 tokenId, address recipient)\\n        internal\\n    {\\n        _royalties[tokenId].recipient = recipient;\\n    }\\n}\\n\",\"keccak256\":\"0x7f3501ddc34a727d16ffb73d68e2298a1637537d60a47cee520a8aa59cffdad4\",\"license\":\"MIT\"},\"contracts/NFT/Royalties/ERC2981/IERC2981Royalties.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/// @title IERC2981Royalties\\n/// @dev Interface for the ERC2981 - Token Royalty standard\\ninterface IERC2981Royalties {\\n    /// @notice Called with the sale price to determine how much royalty\\n    //          is owed and to whom.\\n    /// @param _tokenId - the NFT asset queried for royalty information\\n    /// @param _value - the sale price of the NFT asset specified by _tokenId\\n    /// @return _receiver - address of who should be sent the royalty payment\\n    /// @return _royaltyAmount - the royalty payment amount for value sale price\\n    function royaltyInfo(uint256 _tokenId, uint256 _value)\\n        external\\n        view\\n        returns (address _receiver, uint256 _royaltyAmount);\\n}\\n\",\"keccak256\":\"0xe87706076de93b27b3973b1a736521f7c7acddff0ce2da033e4fe8d5c9a66af2\",\"license\":\"MIT\"},\"contracts/NFT/Royalties/FoundationSecondarySales/IFoundationSecondarySales.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IFoundationSecondarySales {\\n    /// @notice returns a list of royalties recipients and the amount\\n    /// @param tokenId the token Id to check for\\n    /// @return all the recipients and their basis points, for tokenId\\n    function getFees(uint256 tokenId)\\n        external\\n        view\\n        returns (address payable[] memory, uint256[] memory);\\n}\\n\",\"keccak256\":\"0x2e54b6e6c7fcde52e017cc8796b15ebc98c78af150623d5bbf2635cb6ec16a86\",\"license\":\"MIT\"},\"contracts/NFT/Royalties/RaribleSecondarySales/IRaribleSecondarySales.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IRaribleSecondarySales {\\n    /// @notice returns a list of royalties recipients\\n    /// @param tokenId the token Id to check for\\n    /// @return all the recipients for tokenId\\n    function getFeeRecipients(uint256 tokenId)\\n        external\\n        view\\n        returns (address payable[] memory);\\n\\n    /// @notice returns a list of royalties amounts\\n    /// @param tokenId the token Id to check for\\n    /// @return all the amounts for tokenId\\n    function getFeeBps(uint256 tokenId)\\n        external\\n        view\\n        returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x5b74479165046205d6a6f618732b2ead0ab3f2e653dc7c2a228240d08e96fe44\",\"license\":\"MIT\"},\"contracts/NiftyForge721Slim.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport './NFT/ERC721Slim.sol';\\n\\nimport './Modules/INFModuleWithRoyalties.sol';\\nimport './Modules/INFModuleTokenURI.sol';\\nimport './INiftyForge721Slim.sol';\\n\\n/// @title NiftyForge721Slim\\n/// @author Simon Fremaux (@dievardump)\\n/// @dev This is a \\\"slim\\\" version of an ERC721 for NiftyForge\\n///      Slim ERC721 do not have all the bells and whistle (no roles, no modules, no events)\\n///      Slim is mostly made for series (Generative stuff, Series with incremntial token ids, PFPs...)\\n///      or for controlled env\\n///      The mint starts from 1 (or 0) and goes up, until maxTokenId\\n///      If a minter is set at initialisation, only this address can mint. forever.\\n///      else, only the owner can mint.\\n///      royalties are not managed per item, but are contract wide.\\ncontract NiftyForge721Slim is ERC721Slim {\\n    error NotAuthorized();\\n    error OutOfJpegs();\\n    error MaxTokenAlreadySet();\\n    error AlreadyMinted();\\n    error NotZeroMint();\\n    error WrongTransferTo();\\n\\n    /// @notice the only address that can mint on this collection. It can never be changed\\n    address public minter;\\n\\n    /// @notice how many were minted so far\\n    uint256 public minted;\\n\\n    /// @notice offset used to start token id at 0 if needed\\n    uint256 public offsetId;\\n\\n    // count the burned to get totalSuply()\\n    uint256 internal _burned;\\n\\n    /// @notice maximum tokens that can be created on this contract\\n    // this can be set only once by the owner of the contract\\n    // this is used to ensure a max token creation that can be used\\n    // for example when people create a series of XX elements\\n    // since this contract works with \\\"Minters\\\", it is good to\\n    // be able to set in it that there is a max number of elements\\n    // and that this can not change\\n    uint256 public maxSupply;\\n\\n    /// @notice this is the constructor of the contract, called at the time of creation\\n    ///         Although it uses what are called upgradeable contracts, this is only to\\n    ///         be able to make deployment cheap using a Proxy but NiftyForge contracts\\n    ///         ARE NOT UPGRADEABLE => the proxy used is not an upgradeable proxy, the implementation is immutable\\n    /// @param name_ name of the contract (see ERC721)\\n    /// @param symbol_ symbol of the contract (see ERC721)\\n    /// @param contractURI_ The contract URI (containing its metadata) - can be empty \\\"\\\"\\n    /// @param baseURI_ the contract baseURI (if there is)  - can be empty \\\"\\\"\\n    /// @param owner_ Address to whom transfer ownership\\n    /// @param minter_ The address that has the right to mint on the collection\\n    /// @param contractRoyaltiesRecipient the recipient, if the contract has \\\"contract wide royalties\\\"\\n    /// @param contractRoyaltiesValue the value, modules to add / enable directly at creation\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        string memory contractURI_,\\n        string memory baseURI_,\\n        address owner_,\\n        address minter_,\\n        address contractRoyaltiesRecipient,\\n        uint256 contractRoyaltiesValue\\n    ) external initializer {\\n        __ERC721Slim__init(name_, symbol_, contractURI_, baseURI_, address(0));\\n\\n        if (address(0) != minter_) {\\n            minter = minter_;\\n        }\\n\\n        _setDefaultRoyalties(\\n            contractRoyaltiesRecipient,\\n            contractRoyaltiesValue\\n        );\\n\\n        // transfer owner only after attaching modules\\n        if (owner_ != address(0)) {\\n            transferOwnership(owner_);\\n        }\\n    }\\n\\n    ////////////////////////////////////////////////////////////\\n    // Modifiers                                              //\\n    ////////////////////////////////////////////////////////////\\n\\n    modifier onlyMinter() {\\n        // make sure minter has the right to mint (minter if set, else owner)\\n        address _minter = minter;\\n        address sender = msg.sender;\\n        if (_minter != address(0)) {\\n            if (sender != _minter) revert NotAuthorized();\\n        } else if (sender != owner()) {\\n            revert NotAuthorized();\\n        }\\n        _;\\n    }\\n\\n    ////////////////////////////////////////////////////////////\\n    // Getters                                                //\\n    ////////////////////////////////////////////////////////////\\n\\n    /// @notice getter for the version of the implementation\\n    /// @return the current implementation version following the scheme 0x[erc][type][version]\\n    /// erc: 00 => ERC721 | 01 => ERC1155\\n    /// type: 00 => full | 01 => slim\\n    /// version: 00, 01, 02, 03...\\n    function version() external view returns (bytes3) {\\n        return hex'000101';\\n    }\\n\\n    /// @notice Since this contract can only mint in sequence, we can keep track of totalSupply easily\\n    /// @return the current total supply\\n    function totalSupply() external view returns (uint256) {\\n        return minted - _burned;\\n    }\\n\\n    /// @notice returns a tokenURI\\n    /// @dev This function will first check if the minter is an INFModuleTokenURI\\n    ///      if yes, tries to get the tokenURI from it\\n    ///      else it lets the tokenURI be built as usual using _baseURI\\n    ///\\n    /// @param tokenId the tokenId\\n    /// @return uri the tokenURI\\n    /// @inheritdoc\\tERC721Upgradeable\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory uri)\\n    {\\n        require(_exists(tokenId), '!UNKNOWN_TOKEN!');\\n\\n        address _minter = minter;\\n\\n        if (\\n            _minter != address(0) &&\\n            AddressUpgradeable.isContract(_minter) &&\\n            IERC165Upgradeable(_minter).supportsInterface(\\n                type(INFModuleTokenURI).interfaceId\\n            )\\n        ) {\\n            uri = INFModuleTokenURI(_minter).tokenURI(address(this), tokenId);\\n        }\\n\\n        // if uri not set, get it with the normal tokenURI\\n        if (bytes(uri).length == 0) {\\n            uri = super.tokenURI(tokenId);\\n        }\\n    }\\n\\n    ////////////////////////////////////////////////////////////\\n    // Interaction                                            //\\n    ////////////////////////////////////////////////////////////\\n\\n    /// @notice Mint one token to `to`\\n    /// @param to the recipient\\n    /// @return tokenId the tokenId minted\\n    function mint(address to) public onlyMinter returns (uint256 tokenId) {\\n        tokenId = _singleMint(to, address(0));\\n    }\\n\\n    /// @notice Mint one token to `to` and transfers to `transferTo`\\n    /// @param to the first recipient\\n    /// @param transferTo the end recipient\\n    /// @return tokenId the tokenId minted\\n    function mint(address to, address transferTo)\\n        public\\n        onlyMinter\\n        returns (uint256 tokenId)\\n    {\\n        tokenId = _singleMint(to, transferTo);\\n    }\\n\\n    /// @notice Mint `count` tokens to `to`\\n    /// @param to array of address of recipients\\n    /// @return startId and endId\\n    function mintBatch(address to, uint256 count)\\n        public\\n        onlyMinter\\n        returns (uint256 startId, uint256 endId)\\n    {\\n        if (count == 0) revert NotZeroMint();\\n\\n        uint256 offset = offsetId;\\n        uint256 minted_ = minted;\\n\\n        startId = minted_ + 1 - offset;\\n        endId = startId + count - 1;\\n\\n        // in the case we start ids at 0, the maxId is: maxSupply - 1\\n        if (maxSupply != 0 && endId > (maxSupply - offset)) {\\n            revert OutOfJpegs();\\n        }\\n\\n        for (uint256 i; i < count; i++) {\\n            _safeMint(to, startId + i);\\n        }\\n\\n        // updating after mint, so a reEntrancy would throw.\\n        minted = minted_ + count;\\n    }\\n\\n    ////////////////////////////////////////////////////////////\\n    // Owner                                                  //\\n    ////////////////////////////////////////////////////////////\\n\\n    /// @notice allows owner to set maxsupply\\n    /// @dev be careful, this is a one time call function.\\n    ///      When set, the maxSupply can not be reverted nor changed\\n    /// @param maxSupply_ the max supply for this contract\\n    function setMaxSupply(uint256 maxSupply_) external onlyOwner {\\n        if (maxSupply != 0) revert MaxTokenAlreadySet();\\n        maxSupply = maxSupply_;\\n    }\\n\\n    /// @notice This function allows to offset the next id in order to start ids at 0\\n    function startAtZero() external onlyOwner {\\n        if (minted != 0) revert AlreadyMinted();\\n        offsetId = 1;\\n    }\\n\\n    ////////////////////////////////////////////////////////////\\n    // Internal                                               //\\n    ////////////////////////////////////////////////////////////\\n\\n    function _singleMint(address to, address transferTo)\\n        internal\\n        returns (uint256 tokenId)\\n    {\\n        uint256 offset = offsetId;\\n\\n        tokenId = minted + 1 - offset;\\n\\n        // in the case we start ids at 0, the maxId is: maxSupply - 1\\n        if (maxSupply != 0 && tokenId > (maxSupply - offset)) {\\n            revert OutOfJpegs();\\n        }\\n\\n        _safeMint(to, tokenId);\\n        if (transferTo != address(0)) {\\n            _transfer(to, transferTo, tokenId);\\n        }\\n\\n        // updating after mint, so a reEntrancy would throw.\\n        minted++;\\n    }\\n\\n    /// @inheritdoc ERC721Upgradeable\\n    function _burn(uint256 tokenId) internal virtual override {\\n        _burned++;\\n        super._burn(tokenId);\\n    }\\n\\n    /// @dev Gets token royalties taking modules into account\\n    /// @param tokenId the token id for which we check the royalties\\n    function _getTokenRoyalty(uint256 tokenId)\\n        internal\\n        view\\n        override\\n        returns (address royaltyRecipient, uint256 royaltyAmount)\\n    {\\n        require(_exists(tokenId), '!UNKNOWN_TOKEN!');\\n        (royaltyRecipient, royaltyAmount) = super._getTokenRoyalty(tokenId);\\n\\n        // if there are no royalties set already\\n        // try to see if \\\"minter\\\" is set and is supposed to manage royalties\\n        if (royaltyAmount == 0) {\\n            address _minter = minter;\\n\\n            if (\\n                _minter != address(0) &&\\n                AddressUpgradeable.isContract(_minter) &&\\n                IERC165Upgradeable(_minter).supportsInterface(\\n                    type(INFModuleWithRoyalties).interfaceId\\n                )\\n            ) {\\n                (royaltyRecipient, royaltyAmount) = INFModuleWithRoyalties(\\n                    _minter\\n                ).royaltyInfo(address(this), tokenId);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1211babcc84811db16fd2ec8715cfb7dab36ff7787677d2d7488f6157eb5a687\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506139e9806100206000396000f3fe608060405234801561001057600080fd5b50600436106102a05760003560e01c80636a62784211610167578063b9c4d9fb116100ce578063d5abeb0111610087578063d5abeb011461061f578063e8a3d48514610629578063e985e9c514610631578063ee1fe2ad14610644578063f1386cb814610657578063f2fde38b1461066157600080fd5b8063b9c4d9fb1461059d578063c285c442146105bd578063c4ee7f4d146105d0578063c87b56dd146105d8578063ce03fdab146105eb578063d5a06d4c146105fe57600080fd5b80638da5cb5b116101205780638da5cb5b14610538578063938e3d7b1461054957806395d89b411461055c578063a22cb46514610564578063b5c5f67214610577578063b88d4fde1461058a57600080fd5b80636a627842146104dc5780636c0360eb146104ef5780636f8b44b0146104f757806370a082311461050a578063715018a61461051d578063745a41bc1461052557600080fd5b8063248b71fc1161020b57806342966c68116101c457806342966c68146104735780634f02c4201461048657806354fd4d501461049057806355f804b3146104a35780635c8f97de146104b65780636352211e146104c957600080fd5b8063248b71fc146103c45780632a55205a146103ec57806330adf81f1461041e57806336175491146104455780633644e5151461045857806342842e0e1461046057600080fd5b80630ebd4c7f1161025d5780630ebd4c7f14610349578063141a468c14610369578063163c1f191461038a57806318160ddd1461039657806323b872dd1461039e57806324744d54146103b157600080fd5b806301ffc9a7146102a557806306fdde03146102cd57806307546172146102e2578063081812fc1461030e578063095ea7b3146103215780630a9b245314610336575b600080fd5b6102b86102b3366004612f84565b610674565b60405190151581526020015b60405180910390f35b6102d56106f0565b6040516102c49190612ff9565b610103546102f6906001600160a01b031681565b6040516001600160a01b0390911681526020016102c4565b6102f661031c36600461300c565b610782565b61033461032f36600461304a565b61080f565b005b6102b8610344366004613076565b610925565b61035c61035736600461300c565b610953565b6040516102c491906130ce565b61037c61037736600461300c565b6109b0565b6040519081526020016102c4565b60fb5460ff16156102b8565b61037c6109bb565b6103346103ac3660046130e1565b6109d4565b6103346103bf3660046131e7565b610a06565b6103d76103d236600461304a565b610a26565b604080519283526020830191909152016102c4565b6103ff6103fa366004613282565b610b86565b604080516001600160a01b0390931683526020830191909152016102c4565b61037c7f49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad81565b61037c6104533660046132a4565b610bbe565b61037c610c76565b61033461046e3660046130e1565b610c9c565b61033461048136600461300c565b610cb7565b61037c6101045481565b60405161010160e81b81526020016102c4565b6103346104b13660046132df565b610d31565b6103346104c4366004613076565b610d73565b6102f66104d736600461300c565b610e05565b61037c6104ea366004613076565b610e7c565b6102d5610f03565b61033461050536600461300c565b610f92565b61037c610518366004613076565b610fe4565b61033461106b565b610334610533366004613314565b6110a1565b6033546001600160a01b03166102f6565b6103346105573660046132df565b6111c6565b6102d5611204565b610334610572366004613385565b611213565b6103346105853660046133be565b6112d8565b6103346105983660046133f3565b611670565b6105b06105ab36600461300c565b6116a2565b6040516102c49190613480565b6103346105cb366004613493565b611718565b6103346117e8565b6102d56105e636600461300c565b61183c565b61037c6105f936600461300c565b6119a4565b61061161060c36600461300c565b6119df565b6040516102c492919061357c565b61037c6101075481565b6102d5611a8c565b6102b861063f3660046135a1565b611a9a565b61037c6106523660046135a1565b611ac8565b61037c6101055481565b61033461066f366004613076565b611b57565b60006001600160e01b0319821663152a902d60e11b14806106a557506001600160e01b03198216632dde656160e21b145b806106c057506001600160e01b031982166335681b5360e21b145b806106db57506001600160e01b03198216635604e22560e01b145b806106ea57506106ea82611bef565b92915050565b6060609780546106ff906135cf565b80601f016020809104026020016040519081016040528092919081815260200182805461072b906135cf565b80156107785780601f1061074d57610100808354040283529160200191610778565b820191906000526020600020905b81548152906001019060200180831161075b57829003601f168201915b5050505050905090565b600061078d82611c3f565b6107f35760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152609b60205260409020546001600160a01b031690565b600061081a82610e05565b9050806001600160a01b0316836001600160a01b031614156108885760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016107ea565b336001600160a01b03821614806108a457506108a48133611a9a565b6109165760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016107ea565b6109208383611c5c565b505050565b6000816001600160a01b03166109436033546001600160a01b031690565b6001600160a01b03161492915050565b6060600061096083611cca565b91505080156109aa576040805160018082528183019092529060208083019080368337019050509150808260008151811061099d5761099d613604565b6020026020010181815250505b50919050565b60006106ea826119a4565b600061010654610104546109cf9190613630565b905090565b6109df335b82611e35565b6109fb5760405162461bcd60e51b81526004016107ea90613647565b610920838383611ef7565b610a12338584846110a1565b610a1e86868686611670565b505050505050565b6101035460009081906001600160a01b0316338115610a7657816001600160a01b0316816001600160a01b031614610a715760405163ea8e4eb560e01b815260040160405180910390fd5b610aa4565b6033546001600160a01b03828116911614610aa45760405163ea8e4eb560e01b815260040160405180910390fd5b84610ac25760405163592331f760e01b815260040160405180910390fd5b610105546101045481610ad6826001613698565b610ae09190613630565b95506001610aee8888613698565b610af89190613630565b945061010754600014158015610b1b57508161010754610b189190613630565b85115b15610b395760405163db5be9b160e01b815260040160405180910390fd5b60005b87811015610b6957610b5789610b52838a613698565b611f02565b80610b61816136b0565b915050610b3c565b50610b748782613698565b61010481905550505050509250929050565b600080610b9284611cca565b90925090508015610bb757612710610baa82856136cb565b610bb49190613700565b90505b9250929050565b6000610c6b610bcb610c76565b604080517f49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad6020808301919091526001600160a01b038a1682840152606082018990526080820188905260a08083018890528351808403909101815260c08301845280519082012061190160f01b60e084015260e28301949094526101028083019490945282518083039094018452610122909101909152815191012090565b90505b949350505050565b60ff5460009046908114610c9257610c8d81611f1c565b610c96565b60fe545b91505090565b61092083838360405180602001604052806000815250611670565b610cc0336109d9565b610d255760405162461bcd60e51b815260206004820152603060248201527f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760448201526f1b995c881b9bdc88185c1c1c9bdd995960821b60648201526084016107ea565b610d2e81611fc8565b50565b6033546001600160a01b03163314610d5b5760405162461bcd60e51b81526004016107ea90613714565b8051610d6f90610101906020840190612ed5565b5050565b6033546001600160a01b03163314610d9d5760405162461bcd60e51b81526004016107ea90613714565b60fb5460ff16610de75760405162461bcd60e51b8152602060048201526015602482015274215045525f544f4b454e5f524f59414c544945532160581b60448201526064016107ea565b60fc80546001600160a01b0319166001600160a01b03831617905550565b6000818152609960205260408120546001600160a01b0316806106ea5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016107ea565b610103546000906001600160a01b0316338115610eca57816001600160a01b0316816001600160a01b031614610ec55760405163ea8e4eb560e01b815260040160405180910390fd5b610ef8565b6033546001600160a01b03828116911614610ef85760405163ea8e4eb560e01b815260040160405180910390fd5b610c6e846000611fe7565b6101018054610f11906135cf565b80601f0160208091040260200160405190810160405280929190818152602001828054610f3d906135cf565b8015610f8a5780601f10610f5f57610100808354040283529160200191610f8a565b820191906000526020600020905b815481529060010190602001808311610f6d57829003601f168201915b505050505081565b6033546001600160a01b03163314610fbc5760405162461bcd60e51b81526004016107ea90613714565b6101075415610fde576040516337d6328b60e11b815260040160405180910390fd5b61010755565b60006001600160a01b03821661104f5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016107ea565b506001600160a01b03166000908152609a602052604090205490565b6033546001600160a01b031633146110955760405162461bcd60e51b81526004016107ea90613714565b61109f600061208c565b565b428210156110f15760405162461bcd60e51b815260206004820152601960248201527f215045524d49545f444541444c494e455f45585049524544210000000000000060448201526064016107ea565b60006110fc84610e05565b90506000611120868661010060008981526020019081526020016000205487610bbe565b9050600061112e82856120de565b509050826001600160a01b0316816001600160a01b0316148061115657506111568382611a9a565b80611167575061116783838661214b565b6111b35760405162461bcd60e51b815260206004820152601a60248201527f21494e56414c49445f5045524d49545f5349474e41545552452100000000000060448201526064016107ea565b6111bd8787611c5c565b50505050505050565b6033546001600160a01b031633146111f05760405162461bcd60e51b81526004016107ea90613714565b8051610d6f90610102906020840190612ed5565b6060609880546106ff906135cf565b6001600160a01b03821633141561126c5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016107ea565b336000818152609c602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6033546001600160a01b031633146113025760405162461bcd60e51b81526004016107ea90613714565b6001600160a01b0383166113eb5781158061131d5750814710155b6113595760405162461bcd60e51b815260206004820152600d60248201526c2157524f4e475f56414c55452160981b60448201526064016107ea565b604051600090339084908381818185875af1925050503d806000811461139b576040519150601f19603f3d011682016040523d82523d6000602084013e6113a0565b606091505b50509050806113e55760405162461bcd60e51b8152602060048201526011602482015270215452414e534645525f4641494c45442160781b60448201526064016107ea565b50505050565b6040516301ffc9a760e01b8152636cdb3d1360e11b60048201526001600160a01b038416906301ffc9a79060240160206040518083038186803b15801561143157600080fd5b505afa158015611445573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114699190613749565b156114e657604051637921219560e11b8152306004820152336024820152604481018290526064810183905260a06084820152600060a48201526001600160a01b0384169063f242432a9060c4015b600060405180830381600087803b1580156114d257600080fd5b505af11580156111bd573d6000803e3d6000fd5b6040516301ffc9a760e01b81526380ac58cd60e01b60048201526001600160a01b038416906301ffc9a79060240160206040518083038186803b15801561152c57600080fd5b505afa158015611540573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115649190613749565b156115b057604051635c46a7ef60e11b81523060048201523360248201526044810182905260806064820152600060848201526001600160a01b0384169063b88d4fde9060a4016114b8565b60405163a9059cbb60e01b8152336004820152602481018390526001600160a01b0384169063a9059cbb90604401602060405180830381600087803b1580156115f857600080fd5b505af115801561160c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116309190613749565b6109205760405162461bcd60e51b8152602060048201526011602482015270215452414e534645525f4641494c45442160781b60448201526064016107ea565b61167a3383611e35565b6116965760405162461bcd60e51b81526004016107ea90613647565b6113e584848484612297565b60606000806116b084611cca565b915091508060001461171157604080516001808252818301909252906020808301908036833701905050925081836000815181106116f0576116f0613604565b60200260200101906001600160a01b031690816001600160a01b0316815250505b5050919050565b600054610100900460ff1680611731575060005460ff16155b61174d5760405162461bcd60e51b81526004016107ea90613766565b600054610100900460ff1615801561176f576000805461ffff19166101011790555b61177d8989898960006122ca565b6001600160a01b038416156117a95761010380546001600160a01b0319166001600160a01b0386161790555b6117b3838361233d565b6001600160a01b038516156117cb576117cb85611b57565b80156117dd576000805461ff00191690555b505050505050505050565b6033546001600160a01b031633146118125760405162461bcd60e51b81526004016107ea90613714565b610104541561183457604051631bbdf5c560e31b815260040160405180910390fd5b600161010555565b606061184782611c3f565b6118635760405162461bcd60e51b81526004016107ea906137b4565b610103546001600160a01b0316801580159061187f5750803b15155b801561190457506040516301ffc9a760e01b815263e9dc637560e01b60048201526001600160a01b038216906301ffc9a79060240160206040518083038186803b1580156118cc57600080fd5b505afa1580156118e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119049190613749565b1561198e5760405163e9dc637560e01b8152306004820152602481018490526001600160a01b0382169063e9dc63759060440160006040518083038186803b15801561194f57600080fd5b505afa158015611963573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261198b91908101906137dd565b91505b81516109aa5761199d83612437565b9392505050565b60006119af82611c3f565b6119cb5760405162461bcd60e51b81526004016107ea906137b4565b506000908152610100602052604090205490565b6060806000806119ee85611cca565b9150915080600014611a855760408051600180825281830190925290602080830190803683370190505093508184600081518110611a2e57611a2e613604565b6001600160a01b03929092166020928302919091018201526040805160018082528183019092529182810190803683370190505092508083600081518110611a7857611a78613604565b6020026020010181815250505b5050915091565b6101028054610f11906135cf565b6001600160a01b039182166000908152609c6020908152604080832093909416825291909152205460ff1690565b610103546000906001600160a01b0316338115611b1657816001600160a01b0316816001600160a01b031614611b115760405163ea8e4eb560e01b815260040160405180910390fd5b611b44565b6033546001600160a01b03828116911614611b445760405163ea8e4eb560e01b815260040160405180910390fd5b611b4e8585611fe7565b95945050505050565b6033546001600160a01b03163314611b815760405162461bcd60e51b81526004016107ea90613714565b6001600160a01b038116611be65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107ea565b610d2e8161208c565b60006001600160e01b031982166380ac58cd60e01b1480611c2057506001600160e01b03198216635b5e139f60e01b145b806106ea57506301ffc9a760e01b6001600160e01b03198316146106ea565b6000908152609960205260409020546001600160a01b0316151590565b6000818152609b6020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611c9182610e05565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080611cd683611c3f565b611cf25760405162461bcd60e51b81526004016107ea906137b4565b611cfb83612501565b909250905080611e3057610103546001600160a01b03168015801590611d215750803b15155b8015611da657506040516301ffc9a760e01b8152632782d6c760e01b60048201526001600160a01b038216906301ffc9a79060240160206040518083038186803b158015611d6e57600080fd5b505afa158015611d82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da69190613749565b15611e2e57604051632782d6c760e01b8152306004820152602481018590526001600160a01b03821690632782d6c790604401604080518083038186803b158015611df057600080fd5b505afa158015611e04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e28919061384b565b90935091505b505b915091565b6000611e4082611c3f565b611ea15760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016107ea565b6000611eac83610e05565b9050806001600160a01b0316846001600160a01b03161480611ee75750836001600160a01b0316611edc84610782565b6001600160a01b0316145b80610c6e5750610c6e8185611a9a565b6109208383836125b3565b610d6f8282604051806020016040528060008152506125d6565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611f476106f0565b805160209182012060408051808201825260018152603160f81b90840152805192830193909352918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc66060820152608081018390523060a082015260c001604051602081830303815290604052805190602001209050919050565b6101068054906000611fd9836136b0565b9190505550610d2e81612609565b6101055461010454600091908190612000906001613698565b61200a9190613630565b91506101075460001415801561202d5750806101075461202a9190613630565b82115b1561204b5760405163db5be9b160e01b815260040160405180910390fd5b6120558483611f02565b6001600160a01b0383161561206f5761206f848484611ef7565b6101048054906000612080836136b0565b91905055505092915050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000808251604114156121155760208301516040840151606085015160001a61210987828585612621565b94509450505050610bb7565b82516040141561213f576020830151604084015161213486838361270e565b935093505050610bb7565b50600090506002610bb7565b600080600061215a85856120de565b9092509050600081600481111561217357612173613879565b1480156121915750856001600160a01b0316826001600160a01b0316145b156121a15760019250505061199d565b600080876001600160a01b0316631626ba7e60e01b88886040516024016121c992919061388f565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161220791906138a8565b600060405180830381855afa9150503d8060008114612242576040519150601f19603f3d011682016040523d82523d6000602084013e612247565b606091505b509150915081801561225a575080516020145b801561228b57508051630b135d3f60e11b9061227f90830160209081019084016138c4565b6001600160e01b031916145b98975050505050505050565b6122a2848484611ef7565b6122ae8484848461273d565b6113e55760405162461bcd60e51b81526004016107ea906138e1565b6122d2612847565b6122dc85856128c2565b6122e4612957565b8251156123015782516122ff90610102906020860190612ed5565b505b81511561231e57815161231c90610101906020850190612ed5565b505b6001600160a01b038116156123365761233681611b57565b5050505050565b60fb5460ff161561239f5760405162461bcd60e51b815260206004820152602660248201527f2145524332393831526f79616c746965733a44454641554c545f414c52454144604482015265595f5345542160d01b60648201526084016107ea565b6127108111156123f15760405162461bcd60e51b815260206004820152601b60248201527f2145524332393831526f79616c746965733a544f4f5f4849474821000000000060448201526064016107ea565b60fb805460ff19166001179055604080518082019091526001600160a01b039092168083526001600160601b039091166020909201829052600160a01b9091021760fc55565b606061244282611c3f565b6124a65760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016107ea565b60006124b061296c565b905060008151116124d0576040518060200160405280600081525061199d565b806124da8461297c565b6040516020016124eb929190613933565b6040516020818303038152906040529392505050565b6040805180820190915260008082526020820181905290819060fb5460ff161561255957506040805180820190915260fc546001600160a01b0381168252600160a01b90046001600160601b03166020820152612596565b50600083815260fd60209081526040918290208251808401909352546001600160a01b0381168352600160a01b90046001600160601b0316908201525b806000015181602001516001600160601b03169250925050915091565b6001600160a01b038316156125cb576125cb81612a7a565b610920838383612a9d565b6125e08383612c3d565b6125ed600084848461273d565b6109205760405162461bcd60e51b81526004016107ea906138e1565b600081815260fd6020526040812055610d2e81612d70565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156126585750600090506003612705565b8460ff16601b1415801561267057508460ff16601c14155b156126815750600090506004612705565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156126d5573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166126fe57600060019250925050612705565b9150600090505b94509492505050565b6000806001600160ff1b03831660ff84901c601b0161272f87828885612621565b935093505050935093915050565b60006001600160a01b0384163b1561283f57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612781903390899088908890600401613962565b602060405180830381600087803b15801561279b57600080fd5b505af19250505080156127cb575060408051601f3d908101601f191682019092526127c8918101906138c4565b60015b612825573d8080156127f9576040519150601f19603f3d011682016040523d82523d6000602084013e6127fe565b606091505b50805161281d5760405162461bcd60e51b81526004016107ea906138e1565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610c6e565b506001610c6e565b600054610100900460ff1680612860575060005460ff16155b61287c5760405162461bcd60e51b81526004016107ea90613766565b600054610100900460ff1615801561289e576000805461ffff19166101011790555b6128a6612e0b565b6128ae612e75565b8015610d2e576000805461ff001916905550565b600054610100900460ff16806128db575060005460ff16155b6128f75760405162461bcd60e51b81526004016107ea90613766565b600054610100900460ff16158015612919576000805461ffff19166101011790555b825161292c906097906020860190612ed5565b508151612940906098906020850190612ed5565b508015610920576000805461ff0019169055505050565b4660ff81905561296681611f1c565b60fe5550565b606061010180546106ff906135cf565b6060816129a05750506040805180820190915260018152600360fc1b602082015290565b8160005b81156129ca57806129b4816136b0565b91506129c39050600a83613700565b91506129a4565b60008167ffffffffffffffff8111156129e5576129e5613122565b6040519080825280601f01601f191660200182016040528015612a0f576020820181803683370190505b5090505b8415610c6e57612a24600183613630565b9150612a31600a8661399f565b612a3c906030613698565b60f81b818381518110612a5157612a51613604565b60200101906001600160f81b031916908160001a905350612a73600a86613700565b9450612a13565b600081815261010060205260408120805491612a95836136b0565b919050555050565b826001600160a01b0316612ab082610e05565b6001600160a01b031614612b185760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b60648201526084016107ea565b6001600160a01b038216612b7a5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016107ea565b612b85600082611c5c565b6001600160a01b0383166000908152609a60205260408120805460019290612bae908490613630565b90915550506001600160a01b0382166000908152609a60205260408120805460019290612bdc908490613698565b909155505060008181526099602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b038216612c935760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016107ea565b612c9c81611c3f565b15612ce95760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016107ea565b6001600160a01b0382166000908152609a60205260408120805460019290612d12908490613698565b909155505060008181526099602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000612d7b82610e05565b9050612d88600083611c5c565b6001600160a01b0381166000908152609a60205260408120805460019290612db1908490613630565b909155505060008281526099602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b600054610100900460ff1680612e24575060005460ff16155b612e405760405162461bcd60e51b81526004016107ea90613766565b600054610100900460ff161580156128ae576000805461ffff19166101011790558015610d2e576000805461ff001916905550565b600054610100900460ff1680612e8e575060005460ff16155b612eaa5760405162461bcd60e51b81526004016107ea90613766565b600054610100900460ff16158015612ecc576000805461ffff19166101011790555b6128ae3361208c565b828054612ee1906135cf565b90600052602060002090601f016020900481019282612f035760008555612f49565b82601f10612f1c57805160ff1916838001178555612f49565b82800160010185558215612f49579182015b82811115612f49578251825591602001919060010190612f2e565b50612f55929150612f59565b5090565b5b80821115612f555760008155600101612f5a565b6001600160e01b031981168114610d2e57600080fd5b600060208284031215612f9657600080fd5b813561199d81612f6e565b60005b83811015612fbc578181015183820152602001612fa4565b838111156113e55750506000910152565b60008151808452612fe5816020860160208601612fa1565b601f01601f19169290920160200192915050565b60208152600061199d6020830184612fcd565b60006020828403121561301e57600080fd5b5035919050565b6001600160a01b0381168114610d2e57600080fd5b803561304581613025565b919050565b6000806040838503121561305d57600080fd5b823561306881613025565b946020939093013593505050565b60006020828403121561308857600080fd5b813561199d81613025565b600081518084526020808501945080840160005b838110156130c3578151875295820195908201906001016130a7565b509495945050505050565b60208152600061199d6020830184613093565b6000806000606084860312156130f657600080fd5b833561310181613025565b9250602084013561311181613025565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561316157613161613122565b604052919050565b600067ffffffffffffffff82111561318357613183613122565b50601f01601f191660200190565b600082601f8301126131a257600080fd5b81356131b56131b082613169565b613138565b8181528460208386010111156131ca57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060008060c0878903121561320057600080fd5b863561320b81613025565b9550602087013561321b81613025565b945060408701359350606087013567ffffffffffffffff8082111561323f57600080fd5b61324b8a838b01613191565b94506080890135935060a089013591508082111561326857600080fd5b5061327589828a01613191565b9150509295509295509295565b6000806040838503121561329557600080fd5b50508035926020909101359150565b600080600080608085870312156132ba57600080fd5b84356132c581613025565b966020860135965060408601359560600135945092505050565b6000602082840312156132f157600080fd5b813567ffffffffffffffff81111561330857600080fd5b610c6e84828501613191565b6000806000806080858703121561332a57600080fd5b843561333581613025565b93506020850135925060408501359150606085013567ffffffffffffffff81111561335f57600080fd5b61336b87828801613191565b91505092959194509250565b8015158114610d2e57600080fd5b6000806040838503121561339857600080fd5b82356133a381613025565b915060208301356133b381613377565b809150509250929050565b6000806000606084860312156133d357600080fd5b83356133de81613025565b95602085013595506040909401359392505050565b6000806000806080858703121561340957600080fd5b843561341481613025565b9350602085013561342481613025565b925060408501359150606085013567ffffffffffffffff81111561335f57600080fd5b600081518084526020808501945080840160005b838110156130c35781516001600160a01b03168752958201959082019060010161345b565b60208152600061199d6020830184613447565b600080600080600080600080610100898b0312156134b057600080fd5b883567ffffffffffffffff808211156134c857600080fd5b6134d48c838d01613191565b995060208b01359150808211156134ea57600080fd5b6134f68c838d01613191565b985060408b013591508082111561350c57600080fd5b6135188c838d01613191565b975060608b013591508082111561352e57600080fd5b5061353b8b828c01613191565b95505061354a60808a0161303a565b935061355860a08a0161303a565b925061356660c08a0161303a565b915060e089013590509295985092959890939650565b60408152600061358f6040830185613447565b8281036020840152611b4e8185613093565b600080604083850312156135b457600080fd5b82356135bf81613025565b915060208301356133b381613025565b600181811c908216806135e357607f821691505b602082108114156109aa57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156136425761364261361a565b500390565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b600082198211156136ab576136ab61361a565b500190565b60006000198214156136c4576136c461361a565b5060010190565b60008160001904831182151516156136e5576136e561361a565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261370f5761370f6136ea565b500490565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561375b57600080fd5b815161199d81613377565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252600f908201526e21554e4b4e4f574e5f544f4b454e2160881b604082015260600190565b6000602082840312156137ef57600080fd5b815167ffffffffffffffff81111561380657600080fd5b8201601f8101841361381757600080fd5b80516138256131b082613169565b81815285602083850101111561383a57600080fd5b611b4e826020830160208601612fa1565b6000806040838503121561385e57600080fd5b825161386981613025565b6020939093015192949293505050565b634e487b7160e01b600052602160045260246000fd5b828152604060208201526000610c6e6040830184612fcd565b600082516138ba818460208701612fa1565b9190910192915050565b6000602082840312156138d657600080fd5b815161199d81612f6e565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60008351613945818460208801612fa1565b835190830190613959818360208801612fa1565b01949350505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061399590830184612fcd565b9695505050505050565b6000826139ae576139ae6136ea565b50069056fea264697066735822122050be9a15dc804f635682476d3871205439bbaac18019bd54ebebccc43b01c08a64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102a05760003560e01c80636a62784211610167578063b9c4d9fb116100ce578063d5abeb0111610087578063d5abeb011461061f578063e8a3d48514610629578063e985e9c514610631578063ee1fe2ad14610644578063f1386cb814610657578063f2fde38b1461066157600080fd5b8063b9c4d9fb1461059d578063c285c442146105bd578063c4ee7f4d146105d0578063c87b56dd146105d8578063ce03fdab146105eb578063d5a06d4c146105fe57600080fd5b80638da5cb5b116101205780638da5cb5b14610538578063938e3d7b1461054957806395d89b411461055c578063a22cb46514610564578063b5c5f67214610577578063b88d4fde1461058a57600080fd5b80636a627842146104dc5780636c0360eb146104ef5780636f8b44b0146104f757806370a082311461050a578063715018a61461051d578063745a41bc1461052557600080fd5b8063248b71fc1161020b57806342966c68116101c457806342966c68146104735780634f02c4201461048657806354fd4d501461049057806355f804b3146104a35780635c8f97de146104b65780636352211e146104c957600080fd5b8063248b71fc146103c45780632a55205a146103ec57806330adf81f1461041e57806336175491146104455780633644e5151461045857806342842e0e1461046057600080fd5b80630ebd4c7f1161025d5780630ebd4c7f14610349578063141a468c14610369578063163c1f191461038a57806318160ddd1461039657806323b872dd1461039e57806324744d54146103b157600080fd5b806301ffc9a7146102a557806306fdde03146102cd57806307546172146102e2578063081812fc1461030e578063095ea7b3146103215780630a9b245314610336575b600080fd5b6102b86102b3366004612f84565b610674565b60405190151581526020015b60405180910390f35b6102d56106f0565b6040516102c49190612ff9565b610103546102f6906001600160a01b031681565b6040516001600160a01b0390911681526020016102c4565b6102f661031c36600461300c565b610782565b61033461032f36600461304a565b61080f565b005b6102b8610344366004613076565b610925565b61035c61035736600461300c565b610953565b6040516102c491906130ce565b61037c61037736600461300c565b6109b0565b6040519081526020016102c4565b60fb5460ff16156102b8565b61037c6109bb565b6103346103ac3660046130e1565b6109d4565b6103346103bf3660046131e7565b610a06565b6103d76103d236600461304a565b610a26565b604080519283526020830191909152016102c4565b6103ff6103fa366004613282565b610b86565b604080516001600160a01b0390931683526020830191909152016102c4565b61037c7f49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad81565b61037c6104533660046132a4565b610bbe565b61037c610c76565b61033461046e3660046130e1565b610c9c565b61033461048136600461300c565b610cb7565b61037c6101045481565b60405161010160e81b81526020016102c4565b6103346104b13660046132df565b610d31565b6103346104c4366004613076565b610d73565b6102f66104d736600461300c565b610e05565b61037c6104ea366004613076565b610e7c565b6102d5610f03565b61033461050536600461300c565b610f92565b61037c610518366004613076565b610fe4565b61033461106b565b610334610533366004613314565b6110a1565b6033546001600160a01b03166102f6565b6103346105573660046132df565b6111c6565b6102d5611204565b610334610572366004613385565b611213565b6103346105853660046133be565b6112d8565b6103346105983660046133f3565b611670565b6105b06105ab36600461300c565b6116a2565b6040516102c49190613480565b6103346105cb366004613493565b611718565b6103346117e8565b6102d56105e636600461300c565b61183c565b61037c6105f936600461300c565b6119a4565b61061161060c36600461300c565b6119df565b6040516102c492919061357c565b61037c6101075481565b6102d5611a8c565b6102b861063f3660046135a1565b611a9a565b61037c6106523660046135a1565b611ac8565b61037c6101055481565b61033461066f366004613076565b611b57565b60006001600160e01b0319821663152a902d60e11b14806106a557506001600160e01b03198216632dde656160e21b145b806106c057506001600160e01b031982166335681b5360e21b145b806106db57506001600160e01b03198216635604e22560e01b145b806106ea57506106ea82611bef565b92915050565b6060609780546106ff906135cf565b80601f016020809104026020016040519081016040528092919081815260200182805461072b906135cf565b80156107785780601f1061074d57610100808354040283529160200191610778565b820191906000526020600020905b81548152906001019060200180831161075b57829003601f168201915b5050505050905090565b600061078d82611c3f565b6107f35760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152609b60205260409020546001600160a01b031690565b600061081a82610e05565b9050806001600160a01b0316836001600160a01b031614156108885760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016107ea565b336001600160a01b03821614806108a457506108a48133611a9a565b6109165760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016107ea565b6109208383611c5c565b505050565b6000816001600160a01b03166109436033546001600160a01b031690565b6001600160a01b03161492915050565b6060600061096083611cca565b91505080156109aa576040805160018082528183019092529060208083019080368337019050509150808260008151811061099d5761099d613604565b6020026020010181815250505b50919050565b60006106ea826119a4565b600061010654610104546109cf9190613630565b905090565b6109df335b82611e35565b6109fb5760405162461bcd60e51b81526004016107ea90613647565b610920838383611ef7565b610a12338584846110a1565b610a1e86868686611670565b505050505050565b6101035460009081906001600160a01b0316338115610a7657816001600160a01b0316816001600160a01b031614610a715760405163ea8e4eb560e01b815260040160405180910390fd5b610aa4565b6033546001600160a01b03828116911614610aa45760405163ea8e4eb560e01b815260040160405180910390fd5b84610ac25760405163592331f760e01b815260040160405180910390fd5b610105546101045481610ad6826001613698565b610ae09190613630565b95506001610aee8888613698565b610af89190613630565b945061010754600014158015610b1b57508161010754610b189190613630565b85115b15610b395760405163db5be9b160e01b815260040160405180910390fd5b60005b87811015610b6957610b5789610b52838a613698565b611f02565b80610b61816136b0565b915050610b3c565b50610b748782613698565b61010481905550505050509250929050565b600080610b9284611cca565b90925090508015610bb757612710610baa82856136cb565b610bb49190613700565b90505b9250929050565b6000610c6b610bcb610c76565b604080517f49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad6020808301919091526001600160a01b038a1682840152606082018990526080820188905260a08083018890528351808403909101815260c08301845280519082012061190160f01b60e084015260e28301949094526101028083019490945282518083039094018452610122909101909152815191012090565b90505b949350505050565b60ff5460009046908114610c9257610c8d81611f1c565b610c96565b60fe545b91505090565b61092083838360405180602001604052806000815250611670565b610cc0336109d9565b610d255760405162461bcd60e51b815260206004820152603060248201527f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760448201526f1b995c881b9bdc88185c1c1c9bdd995960821b60648201526084016107ea565b610d2e81611fc8565b50565b6033546001600160a01b03163314610d5b5760405162461bcd60e51b81526004016107ea90613714565b8051610d6f90610101906020840190612ed5565b5050565b6033546001600160a01b03163314610d9d5760405162461bcd60e51b81526004016107ea90613714565b60fb5460ff16610de75760405162461bcd60e51b8152602060048201526015602482015274215045525f544f4b454e5f524f59414c544945532160581b60448201526064016107ea565b60fc80546001600160a01b0319166001600160a01b03831617905550565b6000818152609960205260408120546001600160a01b0316806106ea5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016107ea565b610103546000906001600160a01b0316338115610eca57816001600160a01b0316816001600160a01b031614610ec55760405163ea8e4eb560e01b815260040160405180910390fd5b610ef8565b6033546001600160a01b03828116911614610ef85760405163ea8e4eb560e01b815260040160405180910390fd5b610c6e846000611fe7565b6101018054610f11906135cf565b80601f0160208091040260200160405190810160405280929190818152602001828054610f3d906135cf565b8015610f8a5780601f10610f5f57610100808354040283529160200191610f8a565b820191906000526020600020905b815481529060010190602001808311610f6d57829003601f168201915b505050505081565b6033546001600160a01b03163314610fbc5760405162461bcd60e51b81526004016107ea90613714565b6101075415610fde576040516337d6328b60e11b815260040160405180910390fd5b61010755565b60006001600160a01b03821661104f5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016107ea565b506001600160a01b03166000908152609a602052604090205490565b6033546001600160a01b031633146110955760405162461bcd60e51b81526004016107ea90613714565b61109f600061208c565b565b428210156110f15760405162461bcd60e51b815260206004820152601960248201527f215045524d49545f444541444c494e455f45585049524544210000000000000060448201526064016107ea565b60006110fc84610e05565b90506000611120868661010060008981526020019081526020016000205487610bbe565b9050600061112e82856120de565b509050826001600160a01b0316816001600160a01b0316148061115657506111568382611a9a565b80611167575061116783838661214b565b6111b35760405162461bcd60e51b815260206004820152601a60248201527f21494e56414c49445f5045524d49545f5349474e41545552452100000000000060448201526064016107ea565b6111bd8787611c5c565b50505050505050565b6033546001600160a01b031633146111f05760405162461bcd60e51b81526004016107ea90613714565b8051610d6f90610102906020840190612ed5565b6060609880546106ff906135cf565b6001600160a01b03821633141561126c5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016107ea565b336000818152609c602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6033546001600160a01b031633146113025760405162461bcd60e51b81526004016107ea90613714565b6001600160a01b0383166113eb5781158061131d5750814710155b6113595760405162461bcd60e51b815260206004820152600d60248201526c2157524f4e475f56414c55452160981b60448201526064016107ea565b604051600090339084908381818185875af1925050503d806000811461139b576040519150601f19603f3d011682016040523d82523d6000602084013e6113a0565b606091505b50509050806113e55760405162461bcd60e51b8152602060048201526011602482015270215452414e534645525f4641494c45442160781b60448201526064016107ea565b50505050565b6040516301ffc9a760e01b8152636cdb3d1360e11b60048201526001600160a01b038416906301ffc9a79060240160206040518083038186803b15801561143157600080fd5b505afa158015611445573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114699190613749565b156114e657604051637921219560e11b8152306004820152336024820152604481018290526064810183905260a06084820152600060a48201526001600160a01b0384169063f242432a9060c4015b600060405180830381600087803b1580156114d257600080fd5b505af11580156111bd573d6000803e3d6000fd5b6040516301ffc9a760e01b81526380ac58cd60e01b60048201526001600160a01b038416906301ffc9a79060240160206040518083038186803b15801561152c57600080fd5b505afa158015611540573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115649190613749565b156115b057604051635c46a7ef60e11b81523060048201523360248201526044810182905260806064820152600060848201526001600160a01b0384169063b88d4fde9060a4016114b8565b60405163a9059cbb60e01b8152336004820152602481018390526001600160a01b0384169063a9059cbb90604401602060405180830381600087803b1580156115f857600080fd5b505af115801561160c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116309190613749565b6109205760405162461bcd60e51b8152602060048201526011602482015270215452414e534645525f4641494c45442160781b60448201526064016107ea565b61167a3383611e35565b6116965760405162461bcd60e51b81526004016107ea90613647565b6113e584848484612297565b60606000806116b084611cca565b915091508060001461171157604080516001808252818301909252906020808301908036833701905050925081836000815181106116f0576116f0613604565b60200260200101906001600160a01b031690816001600160a01b0316815250505b5050919050565b600054610100900460ff1680611731575060005460ff16155b61174d5760405162461bcd60e51b81526004016107ea90613766565b600054610100900460ff1615801561176f576000805461ffff19166101011790555b61177d8989898960006122ca565b6001600160a01b038416156117a95761010380546001600160a01b0319166001600160a01b0386161790555b6117b3838361233d565b6001600160a01b038516156117cb576117cb85611b57565b80156117dd576000805461ff00191690555b505050505050505050565b6033546001600160a01b031633146118125760405162461bcd60e51b81526004016107ea90613714565b610104541561183457604051631bbdf5c560e31b815260040160405180910390fd5b600161010555565b606061184782611c3f565b6118635760405162461bcd60e51b81526004016107ea906137b4565b610103546001600160a01b0316801580159061187f5750803b15155b801561190457506040516301ffc9a760e01b815263e9dc637560e01b60048201526001600160a01b038216906301ffc9a79060240160206040518083038186803b1580156118cc57600080fd5b505afa1580156118e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119049190613749565b1561198e5760405163e9dc637560e01b8152306004820152602481018490526001600160a01b0382169063e9dc63759060440160006040518083038186803b15801561194f57600080fd5b505afa158015611963573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261198b91908101906137dd565b91505b81516109aa5761199d83612437565b9392505050565b60006119af82611c3f565b6119cb5760405162461bcd60e51b81526004016107ea906137b4565b506000908152610100602052604090205490565b6060806000806119ee85611cca565b9150915080600014611a855760408051600180825281830190925290602080830190803683370190505093508184600081518110611a2e57611a2e613604565b6001600160a01b03929092166020928302919091018201526040805160018082528183019092529182810190803683370190505092508083600081518110611a7857611a78613604565b6020026020010181815250505b5050915091565b6101028054610f11906135cf565b6001600160a01b039182166000908152609c6020908152604080832093909416825291909152205460ff1690565b610103546000906001600160a01b0316338115611b1657816001600160a01b0316816001600160a01b031614611b115760405163ea8e4eb560e01b815260040160405180910390fd5b611b44565b6033546001600160a01b03828116911614611b445760405163ea8e4eb560e01b815260040160405180910390fd5b611b4e8585611fe7565b95945050505050565b6033546001600160a01b03163314611b815760405162461bcd60e51b81526004016107ea90613714565b6001600160a01b038116611be65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107ea565b610d2e8161208c565b60006001600160e01b031982166380ac58cd60e01b1480611c2057506001600160e01b03198216635b5e139f60e01b145b806106ea57506301ffc9a760e01b6001600160e01b03198316146106ea565b6000908152609960205260409020546001600160a01b0316151590565b6000818152609b6020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611c9182610e05565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080611cd683611c3f565b611cf25760405162461bcd60e51b81526004016107ea906137b4565b611cfb83612501565b909250905080611e3057610103546001600160a01b03168015801590611d215750803b15155b8015611da657506040516301ffc9a760e01b8152632782d6c760e01b60048201526001600160a01b038216906301ffc9a79060240160206040518083038186803b158015611d6e57600080fd5b505afa158015611d82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da69190613749565b15611e2e57604051632782d6c760e01b8152306004820152602481018590526001600160a01b03821690632782d6c790604401604080518083038186803b158015611df057600080fd5b505afa158015611e04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e28919061384b565b90935091505b505b915091565b6000611e4082611c3f565b611ea15760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016107ea565b6000611eac83610e05565b9050806001600160a01b0316846001600160a01b03161480611ee75750836001600160a01b0316611edc84610782565b6001600160a01b0316145b80610c6e5750610c6e8185611a9a565b6109208383836125b3565b610d6f8282604051806020016040528060008152506125d6565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611f476106f0565b805160209182012060408051808201825260018152603160f81b90840152805192830193909352918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc66060820152608081018390523060a082015260c001604051602081830303815290604052805190602001209050919050565b6101068054906000611fd9836136b0565b9190505550610d2e81612609565b6101055461010454600091908190612000906001613698565b61200a9190613630565b91506101075460001415801561202d5750806101075461202a9190613630565b82115b1561204b5760405163db5be9b160e01b815260040160405180910390fd5b6120558483611f02565b6001600160a01b0383161561206f5761206f848484611ef7565b6101048054906000612080836136b0565b91905055505092915050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000808251604114156121155760208301516040840151606085015160001a61210987828585612621565b94509450505050610bb7565b82516040141561213f576020830151604084015161213486838361270e565b935093505050610bb7565b50600090506002610bb7565b600080600061215a85856120de565b9092509050600081600481111561217357612173613879565b1480156121915750856001600160a01b0316826001600160a01b0316145b156121a15760019250505061199d565b600080876001600160a01b0316631626ba7e60e01b88886040516024016121c992919061388f565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161220791906138a8565b600060405180830381855afa9150503d8060008114612242576040519150601f19603f3d011682016040523d82523d6000602084013e612247565b606091505b509150915081801561225a575080516020145b801561228b57508051630b135d3f60e11b9061227f90830160209081019084016138c4565b6001600160e01b031916145b98975050505050505050565b6122a2848484611ef7565b6122ae8484848461273d565b6113e55760405162461bcd60e51b81526004016107ea906138e1565b6122d2612847565b6122dc85856128c2565b6122e4612957565b8251156123015782516122ff90610102906020860190612ed5565b505b81511561231e57815161231c90610101906020850190612ed5565b505b6001600160a01b038116156123365761233681611b57565b5050505050565b60fb5460ff161561239f5760405162461bcd60e51b815260206004820152602660248201527f2145524332393831526f79616c746965733a44454641554c545f414c52454144604482015265595f5345542160d01b60648201526084016107ea565b6127108111156123f15760405162461bcd60e51b815260206004820152601b60248201527f2145524332393831526f79616c746965733a544f4f5f4849474821000000000060448201526064016107ea565b60fb805460ff19166001179055604080518082019091526001600160a01b039092168083526001600160601b039091166020909201829052600160a01b9091021760fc55565b606061244282611c3f565b6124a65760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016107ea565b60006124b061296c565b905060008151116124d0576040518060200160405280600081525061199d565b806124da8461297c565b6040516020016124eb929190613933565b6040516020818303038152906040529392505050565b6040805180820190915260008082526020820181905290819060fb5460ff161561255957506040805180820190915260fc546001600160a01b0381168252600160a01b90046001600160601b03166020820152612596565b50600083815260fd60209081526040918290208251808401909352546001600160a01b0381168352600160a01b90046001600160601b0316908201525b806000015181602001516001600160601b03169250925050915091565b6001600160a01b038316156125cb576125cb81612a7a565b610920838383612a9d565b6125e08383612c3d565b6125ed600084848461273d565b6109205760405162461bcd60e51b81526004016107ea906138e1565b600081815260fd6020526040812055610d2e81612d70565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156126585750600090506003612705565b8460ff16601b1415801561267057508460ff16601c14155b156126815750600090506004612705565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156126d5573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166126fe57600060019250925050612705565b9150600090505b94509492505050565b6000806001600160ff1b03831660ff84901c601b0161272f87828885612621565b935093505050935093915050565b60006001600160a01b0384163b1561283f57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612781903390899088908890600401613962565b602060405180830381600087803b15801561279b57600080fd5b505af19250505080156127cb575060408051601f3d908101601f191682019092526127c8918101906138c4565b60015b612825573d8080156127f9576040519150601f19603f3d011682016040523d82523d6000602084013e6127fe565b606091505b50805161281d5760405162461bcd60e51b81526004016107ea906138e1565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610c6e565b506001610c6e565b600054610100900460ff1680612860575060005460ff16155b61287c5760405162461bcd60e51b81526004016107ea90613766565b600054610100900460ff1615801561289e576000805461ffff19166101011790555b6128a6612e0b565b6128ae612e75565b8015610d2e576000805461ff001916905550565b600054610100900460ff16806128db575060005460ff16155b6128f75760405162461bcd60e51b81526004016107ea90613766565b600054610100900460ff16158015612919576000805461ffff19166101011790555b825161292c906097906020860190612ed5565b508151612940906098906020850190612ed5565b508015610920576000805461ff0019169055505050565b4660ff81905561296681611f1c565b60fe5550565b606061010180546106ff906135cf565b6060816129a05750506040805180820190915260018152600360fc1b602082015290565b8160005b81156129ca57806129b4816136b0565b91506129c39050600a83613700565b91506129a4565b60008167ffffffffffffffff8111156129e5576129e5613122565b6040519080825280601f01601f191660200182016040528015612a0f576020820181803683370190505b5090505b8415610c6e57612a24600183613630565b9150612a31600a8661399f565b612a3c906030613698565b60f81b818381518110612a5157612a51613604565b60200101906001600160f81b031916908160001a905350612a73600a86613700565b9450612a13565b600081815261010060205260408120805491612a95836136b0565b919050555050565b826001600160a01b0316612ab082610e05565b6001600160a01b031614612b185760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b60648201526084016107ea565b6001600160a01b038216612b7a5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016107ea565b612b85600082611c5c565b6001600160a01b0383166000908152609a60205260408120805460019290612bae908490613630565b90915550506001600160a01b0382166000908152609a60205260408120805460019290612bdc908490613698565b909155505060008181526099602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b038216612c935760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016107ea565b612c9c81611c3f565b15612ce95760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016107ea565b6001600160a01b0382166000908152609a60205260408120805460019290612d12908490613698565b909155505060008181526099602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000612d7b82610e05565b9050612d88600083611c5c565b6001600160a01b0381166000908152609a60205260408120805460019290612db1908490613630565b909155505060008281526099602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b600054610100900460ff1680612e24575060005460ff16155b612e405760405162461bcd60e51b81526004016107ea90613766565b600054610100900460ff161580156128ae576000805461ffff19166101011790558015610d2e576000805461ff001916905550565b600054610100900460ff1680612e8e575060005460ff16155b612eaa5760405162461bcd60e51b81526004016107ea90613766565b600054610100900460ff16158015612ecc576000805461ffff19166101011790555b6128ae3361208c565b828054612ee1906135cf565b90600052602060002090601f016020900481019282612f035760008555612f49565b82601f10612f1c57805160ff1916838001178555612f49565b82800160010185558215612f49579182015b82811115612f49578251825591602001919060010190612f2e565b50612f55929150612f59565b5090565b5b80821115612f555760008155600101612f5a565b6001600160e01b031981168114610d2e57600080fd5b600060208284031215612f9657600080fd5b813561199d81612f6e565b60005b83811015612fbc578181015183820152602001612fa4565b838111156113e55750506000910152565b60008151808452612fe5816020860160208601612fa1565b601f01601f19169290920160200192915050565b60208152600061199d6020830184612fcd565b60006020828403121561301e57600080fd5b5035919050565b6001600160a01b0381168114610d2e57600080fd5b803561304581613025565b919050565b6000806040838503121561305d57600080fd5b823561306881613025565b946020939093013593505050565b60006020828403121561308857600080fd5b813561199d81613025565b600081518084526020808501945080840160005b838110156130c3578151875295820195908201906001016130a7565b509495945050505050565b60208152600061199d6020830184613093565b6000806000606084860312156130f657600080fd5b833561310181613025565b9250602084013561311181613025565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561316157613161613122565b604052919050565b600067ffffffffffffffff82111561318357613183613122565b50601f01601f191660200190565b600082601f8301126131a257600080fd5b81356131b56131b082613169565b613138565b8181528460208386010111156131ca57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060008060c0878903121561320057600080fd5b863561320b81613025565b9550602087013561321b81613025565b945060408701359350606087013567ffffffffffffffff8082111561323f57600080fd5b61324b8a838b01613191565b94506080890135935060a089013591508082111561326857600080fd5b5061327589828a01613191565b9150509295509295509295565b6000806040838503121561329557600080fd5b50508035926020909101359150565b600080600080608085870312156132ba57600080fd5b84356132c581613025565b966020860135965060408601359560600135945092505050565b6000602082840312156132f157600080fd5b813567ffffffffffffffff81111561330857600080fd5b610c6e84828501613191565b6000806000806080858703121561332a57600080fd5b843561333581613025565b93506020850135925060408501359150606085013567ffffffffffffffff81111561335f57600080fd5b61336b87828801613191565b91505092959194509250565b8015158114610d2e57600080fd5b6000806040838503121561339857600080fd5b82356133a381613025565b915060208301356133b381613377565b809150509250929050565b6000806000606084860312156133d357600080fd5b83356133de81613025565b95602085013595506040909401359392505050565b6000806000806080858703121561340957600080fd5b843561341481613025565b9350602085013561342481613025565b925060408501359150606085013567ffffffffffffffff81111561335f57600080fd5b600081518084526020808501945080840160005b838110156130c35781516001600160a01b03168752958201959082019060010161345b565b60208152600061199d6020830184613447565b600080600080600080600080610100898b0312156134b057600080fd5b883567ffffffffffffffff808211156134c857600080fd5b6134d48c838d01613191565b995060208b01359150808211156134ea57600080fd5b6134f68c838d01613191565b985060408b013591508082111561350c57600080fd5b6135188c838d01613191565b975060608b013591508082111561352e57600080fd5b5061353b8b828c01613191565b95505061354a60808a0161303a565b935061355860a08a0161303a565b925061356660c08a0161303a565b915060e089013590509295985092959890939650565b60408152600061358f6040830185613447565b8281036020840152611b4e8185613093565b600080604083850312156135b457600080fd5b82356135bf81613025565b915060208301356133b381613025565b600181811c908216806135e357607f821691505b602082108114156109aa57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156136425761364261361a565b500390565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b600082198211156136ab576136ab61361a565b500190565b60006000198214156136c4576136c461361a565b5060010190565b60008160001904831182151516156136e5576136e561361a565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261370f5761370f6136ea565b500490565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561375b57600080fd5b815161199d81613377565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252600f908201526e21554e4b4e4f574e5f544f4b454e2160881b604082015260600190565b6000602082840312156137ef57600080fd5b815167ffffffffffffffff81111561380657600080fd5b8201601f8101841361381757600080fd5b80516138256131b082613169565b81815285602083850101111561383a57600080fd5b611b4e826020830160208601612fa1565b6000806040838503121561385e57600080fd5b825161386981613025565b6020939093015192949293505050565b634e487b7160e01b600052602160045260246000fd5b828152604060208201526000610c6e6040830184612fcd565b600082516138ba818460208701612fa1565b9190910192915050565b6000602082840312156138d657600080fd5b815161199d81612f6e565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60008351613945818460208801612fa1565b835190830190613959818360208801612fa1565b01949350505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061399590830184612fcd565b9695505050505050565b6000826139ae576139ae6136ea565b50069056fea264697066735822122050be9a15dc804f635682476d3871205439bbaac18019bd54ebebccc43b01c08a64736f6c63430008090033",
  "devdoc": {
    "author": "Simon Fremaux (@dievardump)",
    "details": "This is a \"slim\" version of an ERC721 for NiftyForge      Slim ERC721 do not have all the bells and whistle (no roles, no modules, no events)      Slim is mostly made for series (Generative stuff, Series with incremntial token ids, PFPs...)      or for controlled env      The mint starts from 1 (or 0) and goes up, until maxTokenId      If a minter is set at initialisation, only this address can mint. forever.      else, only the owner can mint.      royalties are not managed per item, but are contract wide.",
    "kind": "dev",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "details": "Return the DOMAIN_SEPARATOR."
      },
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "burn(uint256)": {
        "details": "Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator."
      },
      "canEdit(address)": {
        "params": {
          "account": "the address to check"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "initialize(string,string,string,string,address,address,address,uint256)": {
        "params": {
          "baseURI_": "the contract baseURI (if there is)  - can be empty \"\"",
          "contractRoyaltiesRecipient": "the recipient, if the contract has \"contract wide royalties\"",
          "contractRoyaltiesValue": "the value, modules to add / enable directly at creation",
          "contractURI_": "The contract URI (containing its metadata) - can be empty \"\"",
          "minter_": "The address that has the right to mint on the collection",
          "name_": "name of the contract (see ERC721)",
          "owner_": "Address to whom transfer ownership",
          "symbol_": "symbol of the contract (see ERC721)"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mint(address)": {
        "params": {
          "to": "the recipient"
        },
        "returns": {
          "tokenId": "the tokenId minted"
        }
      },
      "mint(address,address)": {
        "params": {
          "to": "the first recipient",
          "transferTo": "the end recipient"
        },
        "returns": {
          "tokenId": "the tokenId minted"
        }
      },
      "mintBatch(address,uint256)": {
        "params": {
          "to": "array of address of recipients"
        },
        "returns": {
          "startId": "and endId"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "nonce(uint256)": {
        "params": {
          "tokenId": "token id"
        },
        "returns": {
          "_0": "current nonce"
        }
      },
      "nonces(uint256)": {
        "params": {
          "tokenId": "token id"
        },
        "returns": {
          "_0": "current nonce"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "permit(address,uint256,uint256,bytes)": {
        "details": "Anyone can call this to approve `spender`, even a third-party",
        "params": {
          "deadline": "the deadline for the permit to be used",
          "signature": "permit",
          "spender": "the actor to approve",
          "tokenId": "the token id"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "royaltyInfo(uint256,uint256)": {
        "params": {
          "_tokenId": "- the NFT asset queried for royalty information",
          "_value": "- the sale price of the NFT asset specified by _tokenId"
        },
        "returns": {
          "receiver": "- address of who should be sent the royalty payment",
          "royaltyAmount": "- the royalty payment amount for value sale price"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFromWithPermit(address,address,uint256,bytes,uint256,bytes)": {
        "details": "this supposes that the permit is for msg.sender",
        "params": {
          "_data": "optional data to add",
          "deadline": "the deadline for the permit to be used",
          "from": "current owner",
          "signature": "of permit",
          "to": "recipient",
          "tokenId": "the token id"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setBaseURI(string)": {
        "details": "only an editor can do that (account or module)",
        "params": {
          "baseURI_": "the new base token uri used in tokenURI()"
        }
      },
      "setContractURI(string)": {
        "details": "needs to be owner",
        "params": {
          "contractURI_": "new contract URI"
        }
      },
      "setDefaultRoyaltiesRecipient(address)": {
        "details": "an editor can call this",
        "params": {
          "recipient": "new default royalties recipient"
        }
      },
      "setMaxSupply(uint256)": {
        "details": "be careful, this is a one time call function.      When set, the maxSupply can not be reverted nor changed",
        "params": {
          "maxSupply_": "the max supply for this contract"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "This function will first check if the minter is an INFModuleTokenURI      if yes, tries to get the tokenURI from it      else it lets the tokenURI be built as usual using _baseURI",
        "params": {
          "tokenId": "the tokenId"
        },
        "returns": {
          "uri": "the tokenURI"
        }
      },
      "totalSupply()": {
        "returns": {
          "_0": "the current total supply"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "version()": {
        "returns": {
          "_0": "the current implementation version following the scheme 0x[erc][type][version] erc: 00 => ERC721 | 01 => ERC1155 type: 00 => full | 01 => slim version: 00, 01, 02, 03..."
        }
      },
      "withdraw(address,uint256,uint256)": {
        "params": {
          "amount": "the amount to withdraw if native token, erc20 or erc1155 - must be 0 for ERC721",
          "token": "the token to withdraw from. address(0) means native chain token",
          "tokenId": "the tokenId to withdraw for ERC1155 and ERC721"
        }
      }
    },
    "title": "NiftyForge721Slim",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "canEdit(address)": {
        "notice": "Helper to know if an address can do the action an Editor can"
      },
      "contractURI()": {
        "notice": "contract URI (collection description)"
      },
      "getFeeBps(uint256)": {
        "notice": "see\tIRaribleSecondarySales"
      },
      "getFeeRecipients(uint256)": {
        "notice": "see\tIRaribleSecondarySales"
      },
      "initialize(string,string,string,string,address,address,address,uint256)": {
        "notice": "this is the constructor of the contract, called at the time of creation         Although it uses what are called upgradeable contracts, this is only to         be able to make deployment cheap using a Proxy but NiftyForge contracts         ARE NOT UPGRADEABLE => the proxy used is not an upgradeable proxy, the implementation is immutable"
      },
      "maxSupply()": {
        "notice": "maximum tokens that can be created on this contract"
      },
      "mint(address)": {
        "notice": "Mint one token to `to`"
      },
      "mint(address,address)": {
        "notice": "Mint one token to `to` and transfers to `transferTo`"
      },
      "mintBatch(address,uint256)": {
        "notice": "Mint `count` tokens to `to`"
      },
      "minted()": {
        "notice": "how many were minted so far"
      },
      "minter()": {
        "notice": "the only address that can mint on this collection. It can never be changed"
      },
      "nonce(uint256)": {
        "notice": "Allows to retrieve current nonce for token"
      },
      "nonces(uint256)": {
        "notice": "Allows to retrieve current nonce for token"
      },
      "offsetId()": {
        "notice": "offset used to start token id at 0 if needed"
      },
      "permit(address,uint256,uint256,bytes)": {
        "notice": "function to be called by anyone to approve `spender` using a Permit signature"
      },
      "safeTransferFromWithPermit(address,address,uint256,bytes,uint256,bytes)": {
        "notice": "Allows to get approved using a permit and transfer in the same call"
      },
      "setBaseURI(string)": {
        "notice": "Set the base token URI"
      },
      "setContractURI(string)": {
        "notice": "Helper for the owner of the contract to set the new contract URI"
      },
      "setDefaultRoyaltiesRecipient(address)": {
        "notice": "Allows to change the default royalties recipient"
      },
      "setMaxSupply(uint256)": {
        "notice": "allows owner to set maxsupply"
      },
      "startAtZero()": {
        "notice": "This function allows to offset the next id in order to start ids at 0"
      },
      "tokenURI(uint256)": {
        "notice": "returns a tokenURI"
      },
      "totalSupply()": {
        "notice": "Since this contract can only mint in sequence, we can keep track of totalSupply easily"
      },
      "version()": {
        "notice": "getter for the version of the implementation"
      },
      "withdraw(address,uint256,uint256)": {
        "notice": "This is a generic function that allows this contract's owner to withdraw         any balance / ERC20 / ERC721 / ERC1155 it can have         this contract has no payable nor receive function so it should not get any nativ token         but this could save some ERC20, 721 or 1155"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 224,
        "contract": "contracts/NiftyForge721Slim.sol:NiftyForge721Slim",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 227,
        "contract": "contracts/NiftyForge721Slim.sol:NiftyForge721Slim",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1973,
        "contract": "contracts/NiftyForge721Slim.sol:NiftyForge721Slim",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/NiftyForge721Slim.sol:NiftyForge721Slim",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/NiftyForge721Slim.sol:NiftyForge721Slim",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2668,
        "contract": "contracts/NiftyForge721Slim.sol:NiftyForge721Slim",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 493,
        "contract": "contracts/NiftyForge721Slim.sol:NiftyForge721Slim",
        "label": "_name",
        "offset": 0,
        "slot": "151",
        "type": "t_string_storage"
      },
      {
        "astId": 495,
        "contract": "contracts/NiftyForge721Slim.sol:NiftyForge721Slim",
        "label": "_symbol",
        "offset": 0,
        "slot": "152",
        "type": "t_string_storage"
      },
      {
        "astId": 499,
        "contract": "contracts/NiftyForge721Slim.sol:NiftyForge721Slim",
        "label": "_owners",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 503,
        "contract": "contracts/NiftyForge721Slim.sol:NiftyForge721Slim",
        "label": "_balances",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 507,
        "contract": "contracts/NiftyForge721Slim.sol:NiftyForge721Slim",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "155",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 513,
        "contract": "contracts/NiftyForge721Slim.sol:NiftyForge721Slim",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "156",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1309,
        "contract": "contracts/NiftyForge721Slim.sol:NiftyForge721Slim",
        "label": "__gap",
        "offset": 0,
        "slot": "157",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 1501,
        "contract": "contracts/NiftyForge721Slim.sol:NiftyForge721Slim",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 7894,
        "contract": "contracts/NiftyForge721Slim.sol:NiftyForge721Slim",
        "label": "_useContractRoyalties",
        "offset": 0,
        "slot": "251",
        "type": "t_bool"
      },
      {
        "astId": 7897,
        "contract": "contracts/NiftyForge721Slim.sol:NiftyForge721Slim",
        "label": "_contractRoyalties",
        "offset": 0,
        "slot": "252",
        "type": "t_struct(RoyaltyData)7892_storage"
      },
      {
        "astId": 7902,
        "contract": "contracts/NiftyForge721Slim.sol:NiftyForge721Slim",
        "label": "_royalties",
        "offset": 0,
        "slot": "253",
        "type": "t_mapping(t_uint256,t_struct(RoyaltyData)7892_storage)"
      },
      {
        "astId": 5934,
        "contract": "contracts/NiftyForge721Slim.sol:NiftyForge721Slim",
        "label": "_deploymentDomainSeparator",
        "offset": 0,
        "slot": "254",
        "type": "t_bytes32"
      },
      {
        "astId": 5936,
        "contract": "contracts/NiftyForge721Slim.sol:NiftyForge721Slim",
        "label": "_deploymentChainId",
        "offset": 0,
        "slot": "255",
        "type": "t_uint256"
      },
      {
        "astId": 5940,
        "contract": "contracts/NiftyForge721Slim.sol:NiftyForge721Slim",
        "label": "_nonces",
        "offset": 0,
        "slot": "256",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7291,
        "contract": "contracts/NiftyForge721Slim.sol:NiftyForge721Slim",
        "label": "baseURI",
        "offset": 0,
        "slot": "257",
        "type": "t_string_storage"
      },
      {
        "astId": 7294,
        "contract": "contracts/NiftyForge721Slim.sol:NiftyForge721Slim",
        "label": "contractURI",
        "offset": 0,
        "slot": "258",
        "type": "t_string_storage"
      },
      {
        "astId": 9956,
        "contract": "contracts/NiftyForge721Slim.sol:NiftyForge721Slim",
        "label": "minter",
        "offset": 0,
        "slot": "259",
        "type": "t_address"
      },
      {
        "astId": 9959,
        "contract": "contracts/NiftyForge721Slim.sol:NiftyForge721Slim",
        "label": "minted",
        "offset": 0,
        "slot": "260",
        "type": "t_uint256"
      },
      {
        "astId": 9962,
        "contract": "contracts/NiftyForge721Slim.sol:NiftyForge721Slim",
        "label": "offsetId",
        "offset": 0,
        "slot": "261",
        "type": "t_uint256"
      },
      {
        "astId": 9964,
        "contract": "contracts/NiftyForge721Slim.sol:NiftyForge721Slim",
        "label": "_burned",
        "offset": 0,
        "slot": "262",
        "type": "t_uint256"
      },
      {
        "astId": 9967,
        "contract": "contracts/NiftyForge721Slim.sol:NiftyForge721Slim",
        "label": "maxSupply",
        "offset": 0,
        "slot": "263",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(RoyaltyData)7892_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC2981Royalties.RoyaltyData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoyaltyData)7892_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoyaltyData)7892_storage": {
        "encoding": "inplace",
        "label": "struct ERC2981Royalties.RoyaltyData",
        "members": [
          {
            "astId": 7889,
            "contract": "contracts/NiftyForge721Slim.sol:NiftyForge721Slim",
            "label": "recipient",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7891,
            "contract": "contracts/NiftyForge721Slim.sol:NiftyForge721Slim",
            "label": "amount",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}