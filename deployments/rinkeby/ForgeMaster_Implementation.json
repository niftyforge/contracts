{
  "address": "0x98a2194c4fA9ceE2Cedd1c2D37875784B2B56D63",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "registry",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "FlagRegistry",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "registry",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "FlagToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "registry",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "ForceIndexing",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "module",
          "type": "address"
        }
      ],
      "name": "ModuleAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "module",
          "type": "address"
        }
      ],
      "name": "ModuleRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "registry",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "context",
          "type": "string"
        }
      ],
      "name": "RegistryCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "registry",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "slug",
          "type": "string"
        }
      ],
      "name": "RegistrySlug",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "module",
          "type": "address"
        }
      ],
      "name": "addModule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "contractURI_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "baseURI_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "module",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "enabled",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "minter",
              "type": "bool"
            }
          ],
          "internalType": "struct INiftyForge721.ModuleInit[]",
          "name": "modulesInit",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "contractRoyaltiesRecipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "contractRoyaltiesValue",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "slug",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "context",
          "type": "string"
        }
      ],
      "name": "createERC721",
      "outputs": [
        {
          "internalType": "address",
          "name": "newContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "contractURI_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "baseURI_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "contractRoyaltiesRecipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "contractRoyaltiesValue",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "slug",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "context",
          "type": "string"
        }
      ],
      "name": "createERC721Slim",
      "outputs": [
        {
          "internalType": "address",
          "name": "newContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "registry",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "flagRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "registry",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "flagToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "flaggedRegistries",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "registry",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "forceReindexing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getERC1155Implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getERC1155ProxyRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getERC721Implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getERC721ProxyRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "slug",
          "type": "string"
        }
      ],
      "name": "getRegistryBySlug",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "locked",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isLocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "slug",
          "type": "string"
        }
      ],
      "name": "isSlugFree",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "registry",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isTokenFlagged",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastIndexing",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "listModules",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "list",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "listRegistries",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "list",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "module",
          "type": "address"
        }
      ],
      "name": "removeModule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "setERC1155Implementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        }
      ],
      "name": "setERC1155ProxyRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "setERC721Implementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        }
      ],
      "name": "setERC721ProxyRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "setERC721SlimImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "locked",
          "type": "bool"
        }
      ],
      "name": "setLocked",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "slug",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "registry",
          "type": "address"
        }
      ],
      "name": "setSlug",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1b5db3854ab5fbfd2a03a0e3a1e9e81d6d1d86de9ceccbf535b97d51325e71ee",
  "receipt": {
    "to": null,
    "from": "0xF4274229bEe63d4A6D1edDE6919aFa815f6e1a24",
    "contractAddress": "0x98a2194c4fA9ceE2Cedd1c2D37875784B2B56D63",
    "transactionIndex": 0,
    "gasUsed": "2022514",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x8809767c678f396f82dbb77c07303d4a7cb76732951b8c7ea10227a44c2fec04",
    "transactionHash": "0x1b5db3854ab5fbfd2a03a0e3a1e9e81d6d1d86de9ceccbf535b97d51325e71ee",
    "logs": [],
    "blockNumber": 10410801,
    "cumulativeGasUsed": "2022514",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "b2a9555ed8e97279d3715bf9bce5a3d4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"FlagRegistry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"FlagToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"ForceIndexing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"ModuleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"ModuleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"context\",\"type\":\"string\"}],\"name\":\"RegistryCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"slug\",\"type\":\"string\"}],\"name\":\"RegistrySlug\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"addModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractURI_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"minter\",\"type\":\"bool\"}],\"internalType\":\"struct INiftyForge721.ModuleInit[]\",\"name\":\"modulesInit\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"contractRoyaltiesRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"contractRoyaltiesValue\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"slug\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"context\",\"type\":\"string\"}],\"name\":\"createERC721\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractURI_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractRoyaltiesRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"contractRoyaltiesValue\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"slug\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"context\",\"type\":\"string\"}],\"name\":\"createERC721Slim\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"flagRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"flagToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"flaggedRegistries\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"forceReindexing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getERC1155Implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getERC1155ProxyRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getERC721Implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getERC721ProxyRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"slug\",\"type\":\"string\"}],\"name\":\"getRegistryBySlug\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"slug\",\"type\":\"string\"}],\"name\":\"isSlugFree\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isTokenFlagged\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastIndexing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listModules\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"list\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"listRegistries\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"list\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"removeModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"setERC1155Implementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"setERC1155ProxyRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"setERC721Implementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"setERC721ProxyRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"setERC721SlimImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"}],\"name\":\"setLocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"slug\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"setSlug\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Simon Fremaux (@dievardump)\",\"kind\":\"dev\",\"methods\":{\"addModule(address)\":{\"params\":{\"module\":\"address of the module to add to the list\"}},\"createERC721(string,string,string,string,address,(address,bool,bool)[],address,uint256,string,string)\":{\"details\":\"the contract created is a minimal proxy to the _erc721Implementation\",\"params\":{\"baseURI_\":\"The contract base URI (where to find the NFTs) - can be empty \\\"\\\"\",\"contractRoyaltiesRecipient\":\"the recipient, if the contract has \\\"contract wide royalties\\\"\",\"contractRoyaltiesValue\":\"the value, modules to add / enable directly at creation\",\"contractURI_\":\"The contract URI (containing its metadata) - can be empty \\\"\\\"\",\"modulesInit\":\"array of ModuleInit\",\"name_\":\"name of the contract (see ERC721)\",\"owner_\":\"Address to whom transfer ownership\",\"symbol_\":\"symbol of the contract (see ERC721)\"},\"returns\":{\"newContract\":\"the address of the new contract\"}},\"createERC721Slim(string,string,string,string,address,address,address,uint256,string,string)\":{\"details\":\"the contract created is a minimal proxy to the _erc721SlimImplementation\",\"params\":{\"baseURI_\":\"The contract base URI (where to find the NFTs) - can be empty \\\"\\\"\",\"contractRoyaltiesRecipient\":\"the recipient, if the contract has \\\"contract wide royalties\\\"\",\"contractRoyaltiesValue\":\"the value, modules to add / enable directly at creation\",\"contractURI_\":\"The contract URI (containing its metadata) - can be empty \\\"\\\"\",\"minter\":\"The address that has the right to mint on the collection (see INiftyForge721Slim)\",\"name_\":\"name of the contract (see ERC721)\",\"owner_\":\"Address to whom transfer ownership\",\"symbol_\":\"symbol of the contract (see ERC721)\"},\"returns\":{\"newContract\":\"the address of the new contract\"}},\"flagRegistry(address,string)\":{\"params\":{\"reason\":\"the reason to flag\",\"registry\":\"the registry to flag\"}},\"flagToken(address,uint256,string)\":{\"params\":{\"reason\":\"the reason to flag\",\"registry\":\"the registry to flag\",\"tokenId\":\"the tokenId\"}},\"forceReindexing(address,uint256[])\":{\"params\":{\"registry\":\"the registry to reindex\",\"tokenIds\":\"the ids to reindex. If empty, will try to reindex all tokens for this registry\"}},\"getRegistryBySlug(string)\":{\"params\":{\"slug\":\"the slug to get the registry address\"},\"returns\":{\"_0\":\"the registry address\"}},\"isLocked()\":{\"returns\":{\"_0\":\"if the contract is locked for new creations or not\"}},\"isSlugFree(string)\":{\"params\":{\"slug\":\"the slug to check\"},\"returns\":{\"_0\":\"if the slug is used\"}},\"isTokenFlagged(address,uint256)\":{\"params\":{\"registry\":\"the registry\",\"tokenId\":\"the tokenId\"}},\"listModules()\":{\"returns\":{\"list\":\"of modules\"}},\"listRegistries(uint256,uint256)\":{\"params\":{\"limit\":\"the number of elements we request\",\"startAt\":\"the index to start at (will come in handy if one day we have too many contracts)\"},\"returns\":{\"list\":\"of registries\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeModule(address)\":{\"params\":{\"module\":\"address of the module to remove from the list\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setERC1155Implementation(address)\":{\"params\":{\"implementation\":\"the address to proxy calls to\"}},\"setERC1155ProxyRegistry(address)\":{\"params\":{\"proxy\":\"the address of the proxy\"}},\"setERC721Implementation(address)\":{\"params\":{\"implementation\":\"the address to proxy calls to\"}},\"setERC721ProxyRegistry(address)\":{\"params\":{\"proxy\":\"the address of the proxy\"}},\"setERC721SlimImplementation(address)\":{\"params\":{\"implementation\":\"the address to proxy calls to\"}},\"setLocked(bool)\":{\"params\":{\"locked\":\"the new state\"}},\"setSlug(string,address)\":{\"details\":\"only someone with Editor role on registry can call this\",\"params\":{\"registry\":\"the collection to link the slug with\",\"slug\":\"the slug for the collection.        be aware that slugs will only work in the frontend if        they are composed of a-zA-Z0-9 and -        with no double dashed (--) allowed.        Any other character will render the slug invalid.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"ForgeMaster\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addModule(address)\":{\"notice\":\"Helper to add an official module to the list\"},\"createERC721(string,string,string,string,address,(address,bool,bool)[],address,uint256,string,string)\":{\"notice\":\"Creates a new NiftyForge721\"},\"createERC721Slim(string,string,string,string,address,address,address,uint256,string,string)\":{\"notice\":\"Creates a new NiftyForge721Slim\"},\"flagRegistry(address,string)\":{\"notice\":\"Method allowing to flag a registry\"},\"flagToken(address,uint256,string)\":{\"notice\":\"Method allowing this owner, or an editor of the registry, to flag a token\"},\"forceReindexing(address,uint256[])\":{\"notice\":\"Method allowing an editor to ask for reindexing on a regisytry         (for example if baseURI changes)         This will be listen to by the NiftyForgeMetadata graph, and launch;         - either a reindexation of alist of tokenIds (if tokenIds.length != 0)         - a full reindexation if tokenIds.length == 0         This can be very long and block the indexer         so calling this with a list of tokenIds > 10 or for a full reindexation is limited         Abuse on this function can also result in the Registry banned.         Only an Editor on the Registry can request a full reindexing\"},\"getERC1155Implementation()\":{\"notice\":\"Getter for the ERC1155 Implementation\"},\"getERC1155ProxyRegistry()\":{\"notice\":\"Getter for the ERC1155 OpenSea registry / proxy\"},\"getERC721Implementation()\":{\"notice\":\"Getter for the ERC721 Implementation\"},\"getERC721ProxyRegistry()\":{\"notice\":\"Getter for the ERC721 OpenSea registry / proxy\"},\"getRegistryBySlug(string)\":{\"notice\":\"returns a registry address from a slug\"},\"isLocked()\":{\"notice\":\"Helper to know if the contract is locked\"},\"isSlugFree(string)\":{\"notice\":\"allows to check if a slug can be used\"},\"isTokenFlagged(address,uint256)\":{\"notice\":\"helper to know if a token is flagged\"},\"listModules()\":{\"notice\":\"Helper to list all modules\"},\"listRegistries(uint256,uint256)\":{\"notice\":\"Helper to list all registries\"},\"removeModule(address)\":{\"notice\":\"Helper to remove an official module from the list\"},\"setERC1155Implementation(address)\":{\"notice\":\"Setter for the ERC1155 Implementation\"},\"setERC1155ProxyRegistry(address)\":{\"notice\":\"Setter for the ERC1155 OpenSea registry / proxy\"},\"setERC721Implementation(address)\":{\"notice\":\"Setter for the ERC721 Implementation\"},\"setERC721ProxyRegistry(address)\":{\"notice\":\"Setter for the ERC721 OpenSea registry / proxy\"},\"setERC721SlimImplementation(address)\":{\"notice\":\"Setter for the ERC721Slim Implementation\"},\"setLocked(bool)\":{\"notice\":\"Setter for owner to stop the registries creation or not\"},\"setSlug(string,address)\":{\"notice\":\"Allows to change the slug for a registry\"}},\"notice\":\"This contract allows anyone to create ERC721 contract with role management         modules, Permits, on-chain Royalties, for pretty cheap.         Those contract & nfts are all referenced in the same Subgraph that can be used to create         a small, customizable, Storefront for anyone that wishes to.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ForgeMaster.sol\":\"ForgeMaster\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary ClonesUpgradeable {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xf4059b28b9d7c342804d33b16ea30c65ca6afd560e426b44ca727a0343c04c68\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfbb3ca7272af58dc245a20e91a1f68481ee04706fa3fe46d184000efc21f4bad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9dc1ad66ada6a503bef1ffde62ac688c58eac660fe50c054f6e49e3b27ae295d\",\"license\":\"MIT\"},\"contracts/ForgeMaster.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\n\\nimport './IForgeMaster.sol';\\n\\nimport './ForgeMaster/ForgeMasterStorage.sol';\\n\\nimport './INiftyForge721.sol';\\nimport './INiftyForge721Slim.sol';\\n\\n/// @title ForgeMaster\\n/// @author Simon Fremaux (@dievardump)\\n/// @notice This contract allows anyone to create ERC721 contract with role management\\n///         modules, Permits, on-chain Royalties, for pretty cheap.\\n///         Those contract & nfts are all referenced in the same Subgraph that can be used to create\\n///         a small, customizable, Storefront for anyone that wishes to.\\ncontract ForgeMaster is IForgeMaster, OwnableUpgradeable, ForgeMasterStorage {\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    // emitted when a registry is created\\n    event RegistryCreated(address indexed registry, string context);\\n\\n    // emitted when a slug is registered for a registry\\n    event RegistrySlug(address indexed registry, string slug);\\n\\n    // emitted when a module is added to the list of official modules\\n    event ModuleAdded(address indexed module);\\n\\n    // emitted when a module is removed from the list of official modules\\n    event ModuleRemoved(address indexed module);\\n\\n    // Force reindexing for a registry\\n    // if tokenIds.length == 0 then a full reindexing will be performed\\n    // this will be done automatically in the \\\"niftyforge metadata\\\" graph\\n    // It might create a *very* long indexing process. Do not use for fun.\\n    // Abuse of reindexing might result in the registry being flagged\\n    // and banned from the public indexer\\n    event ForceIndexing(address registry, uint256[] tokenIds);\\n\\n    // Flags a registry\\n    event FlagRegistry(address registry, address operator, string reason);\\n\\n    // Flags a token\\n    event FlagToken(\\n        address registry,\\n        uint256 tokenId,\\n        address operator,\\n        string reason\\n    );\\n\\n    function initialize(bool locked, address owner_) external initializer {\\n        __Ownable_init();\\n\\n        _locked = locked;\\n\\n        if (owner_ != address(0)) {\\n            transferOwnership(owner_);\\n        }\\n    }\\n\\n    /// @notice Helper to know if the contract is locked\\n    /// @return if the contract is locked for new creations or not\\n    function isLocked() external view returns (bool) {\\n        return _locked;\\n    }\\n\\n    /// @notice Getter for the ERC721 Implementation\\n    function getERC721Implementation() public view returns (address) {\\n        return _erc721Implementation;\\n    }\\n\\n    /// @notice Getter for the ERC1155 Implementation\\n    function getERC1155Implementation() public view returns (address) {\\n        return _erc1155Implementation;\\n    }\\n\\n    /// @notice Getter for the ERC721 OpenSea registry / proxy\\n    function getERC721ProxyRegistry() public view returns (address) {\\n        return _openseaERC721ProxyRegistry;\\n    }\\n\\n    /// @notice Getter for the ERC1155 OpenSea registry / proxy\\n    function getERC1155ProxyRegistry() public view returns (address) {\\n        return _openseaERC1155ProxyRegistry;\\n    }\\n\\n    /// @notice allows to check if a slug can be used\\n    /// @param slug the slug to check\\n    /// @return if the slug is used\\n    function isSlugFree(string memory slug) external view returns (bool) {\\n        bytes32 bSlug = keccak256(bytes(slug));\\n        // verifies that the slug is not already in use\\n        return _slugsToRegistry[bSlug] != address(0);\\n    }\\n\\n    /// @notice returns a registry address from a slug\\n    /// @param slug the slug to get the registry address\\n    /// @return the registry address\\n    function getRegistryBySlug(string memory slug)\\n        external\\n        view\\n        returns (address)\\n    {\\n        bytes32 bSlug = keccak256(bytes(slug));\\n        // verifies that the slug is not already in use\\n        require(_slugsToRegistry[bSlug] != address(0), '!UNKNOWN_SLUG!');\\n        return _slugsToRegistry[bSlug];\\n    }\\n\\n    /// @notice Helper to list all registries\\n    /// @param startAt the index to start at (will come in handy if one day we have too many contracts)\\n    /// @param limit the number of elements we request\\n    /// @return list of registries\\n    function listRegistries(uint256 startAt, uint256 limit)\\n        external\\n        view\\n        returns (address[] memory list)\\n    {\\n        uint256 count = _registries.length();\\n\\n        require(startAt < count, '!OVERFLOW!');\\n\\n        if (startAt + limit > count) {\\n            limit = count - startAt;\\n        }\\n\\n        list = new address[](limit);\\n        for (uint256 i; i < limit; i++) {\\n            list[i] = _registries.at(startAt + i);\\n        }\\n    }\\n\\n    /// @notice Helper to list all modules\\n    /// @return list of modules\\n    function listModules() external view returns (address[] memory list) {\\n        uint256 count = _modules.length();\\n        list = new address[](count);\\n        for (uint256 i; i < count; i++) {\\n            list[i] = _modules.at(i);\\n        }\\n    }\\n\\n    /// @notice helper to know if a token is flagged\\n    /// @param registry the registry\\n    /// @param tokenId the tokenId\\n    function isTokenFlagged(address registry, uint256 tokenId)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return _flaggedTokens[registry][tokenId];\\n    }\\n\\n    /// @notice Creates a new NiftyForge721\\n    /// @dev the contract created is a minimal proxy to the _erc721Implementation\\n    /// @param name_ name of the contract (see ERC721)\\n    /// @param symbol_ symbol of the contract (see ERC721)\\n    /// @param contractURI_ The contract URI (containing its metadata) - can be empty \\\"\\\"\\n    /// @param baseURI_ The contract base URI (where to find the NFTs) - can be empty \\\"\\\"\\n    /// @param owner_ Address to whom transfer ownership\\n    /// @param modulesInit array of ModuleInit\\n    /// @param contractRoyaltiesRecipient the recipient, if the contract has \\\"contract wide royalties\\\"\\n    /// @param contractRoyaltiesValue the value, modules to add / enable directly at creation\\n    /// @return newContract the address of the new contract\\n    function createERC721(\\n        string memory name_,\\n        string memory symbol_,\\n        string memory contractURI_,\\n        string memory baseURI_,\\n        address owner_,\\n        INiftyForge721.ModuleInit[] memory modulesInit,\\n        address contractRoyaltiesRecipient,\\n        uint256 contractRoyaltiesValue,\\n        string memory slug,\\n        string memory context\\n    ) external returns (address newContract) {\\n        require(_erc721Implementation != address(0), '!NO_721_IMPLEMENTATION!');\\n\\n        // verify not locked or not owner\\n        require(_locked == false || msg.sender == owner(), '!LOCKED!');\\n\\n        // create minimal proxy to _erc721Implementation\\n        newContract = ClonesUpgradeable.clone(_erc721Implementation);\\n\\n        // initialize the non upgradeable proxy\\n        INiftyForge721(payable(newContract)).initialize(\\n            name_,\\n            symbol_,\\n            contractURI_,\\n            baseURI_,\\n            owner_ != address(0) ? owner_ : msg.sender,\\n            modulesInit,\\n            contractRoyaltiesRecipient,\\n            contractRoyaltiesValue\\n        );\\n\\n        // add the new contract to the registry\\n        _addRegistry(newContract, context);\\n\\n        if (bytes(slug).length > 0) {\\n            setSlug(slug, newContract);\\n        }\\n    }\\n\\n    /// @notice Creates a new NiftyForge721Slim\\n    /// @dev the contract created is a minimal proxy to the _erc721SlimImplementation\\n    /// @param name_ name of the contract (see ERC721)\\n    /// @param symbol_ symbol of the contract (see ERC721)\\n    /// @param contractURI_ The contract URI (containing its metadata) - can be empty \\\"\\\"\\n    /// @param baseURI_ The contract base URI (where to find the NFTs) - can be empty \\\"\\\"\\n    /// @param owner_ Address to whom transfer ownership\\n    /// @param minter The address that has the right to mint on the collection (see INiftyForge721Slim)\\n    /// @param contractRoyaltiesRecipient the recipient, if the contract has \\\"contract wide royalties\\\"\\n    /// @param contractRoyaltiesValue the value, modules to add / enable directly at creation\\n    /// @return newContract the address of the new contract\\n    function createERC721Slim(\\n        string memory name_,\\n        string memory symbol_,\\n        string memory contractURI_,\\n        string memory baseURI_,\\n        address owner_,\\n        address minter,\\n        address contractRoyaltiesRecipient,\\n        uint256 contractRoyaltiesValue,\\n        string memory slug,\\n        string memory context\\n    ) external returns (address newContract) {\\n        require(\\n            _erc721SlimImplementation != address(0),\\n            '!NO_721SLIM_IMPLEMENTATION!'\\n        );\\n\\n        // verify not locked or not owner\\n        require(_locked == false || msg.sender == owner(), '!LOCKED!');\\n\\n        // create minimal proxy to _erc721SlimImplementation\\n        newContract = ClonesUpgradeable.clone(_erc721SlimImplementation);\\n\\n        // initialize the non upgradeable proxy\\n        INiftyForge721Slim(newContract).initialize(\\n            name_,\\n            symbol_,\\n            contractURI_,\\n            baseURI_,\\n            owner_ != address(0) ? owner_ : msg.sender,\\n            minter,\\n            contractRoyaltiesRecipient,\\n            contractRoyaltiesValue\\n        );\\n\\n        // add the new contract to the registry\\n        _addRegistry(newContract, context);\\n\\n        if (bytes(slug).length > 0) {\\n            setSlug(slug, newContract);\\n        }\\n    }\\n\\n    /// @notice Method allowing an editor to ask for reindexing on a regisytry\\n    ///         (for example if baseURI changes)\\n    ///         This will be listen to by the NiftyForgeMetadata graph, and launch;\\n    ///         - either a reindexation of alist of tokenIds (if tokenIds.length != 0)\\n    ///         - a full reindexation if tokenIds.length == 0\\n    ///         This can be very long and block the indexer\\n    ///         so calling this with a list of tokenIds > 10 or for a full reindexation is limited\\n    ///         Abuse on this function can also result in the Registry banned.\\n    ///         Only an Editor on the Registry can request a full reindexing\\n    /// @param registry the registry to reindex\\n    /// @param tokenIds the ids to reindex. If empty, will try to reindex all tokens for this registry\\n    function forceReindexing(address registry, uint256[] memory tokenIds)\\n        external\\n    {\\n        require(_registries.contains(registry), '!UNKNOWN_REGISTRY!');\\n        require(flaggedRegistries[registry] == false, '!FLAGGED_REGISTRY!');\\n\\n        // only an editor can ask for a \\\"big indexing\\\"\\n        if (tokenIds.length == 0 || tokenIds.length > 10) {\\n            uint256 lastKnownIndexing = lastIndexing[registry];\\n            require(\\n                block.timestamp - lastKnownIndexing > 1 days,\\n                '!INDEXING_DELAY!'\\n            );\\n\\n            require(\\n                INiftyForge721(payable(registry)).canEdit(msg.sender),\\n                '!NOT_EDITOR!'\\n            );\\n            lastIndexing[registry] = block.timestamp;\\n        }\\n\\n        emit ForceIndexing(registry, tokenIds);\\n    }\\n\\n    /// @notice Method allowing to flag a registry\\n    /// @param registry the registry to flag\\n    /// @param reason the reason to flag\\n    function flagRegistry(address registry, string memory reason)\\n        external\\n        onlyOwner\\n    {\\n        require(_registries.contains(registry), '!UNKNOWN_REGISTRY!');\\n        require(\\n            flaggedRegistries[registry] == false,\\n            '!REGISTRY_ALREADY_FLAGGED!'\\n        );\\n\\n        flaggedRegistries[registry] = true;\\n\\n        emit FlagRegistry(registry, msg.sender, reason);\\n    }\\n\\n    /// @notice Method allowing this owner, or an editor of the registry, to flag a token\\n    /// @param registry the registry to flag\\n    /// @param tokenId the tokenId\\n    /// @param reason the reason to flag\\n    function flagToken(\\n        address registry,\\n        uint256 tokenId,\\n        string memory reason\\n    ) external {\\n        require(_registries.contains(registry), '!UNKNOWN_REGISTRY!');\\n        require(\\n            flaggedRegistries[registry] == false,\\n            '!REGISTRY_ALREADY_FLAGGED!'\\n        );\\n        require(\\n            _flaggedTokens[registry][tokenId] == false,\\n            '!TOKEN_ALREADY_FLAGGED!'\\n        );\\n\\n        // only this contract owner, or an editor on the registry, can flag a token\\n        // tokens when they are flagged are not shown on the\\n        require(\\n            msg.sender == owner() ||\\n                INiftyForge721(payable(registry)).canEdit(msg.sender),\\n            '!NOT_EDITOR!'\\n        );\\n\\n        _flaggedTokens[registry][tokenId] = true;\\n\\n        emit FlagToken(registry, tokenId, msg.sender, reason);\\n    }\\n\\n    /// @notice Setter for owner to stop the registries creation or not\\n    /// @param locked the new state\\n    function setLocked(bool locked) external onlyOwner {\\n        _locked = locked;\\n    }\\n\\n    /// @notice Setter for the ERC721 Implementation\\n    /// @param implementation the address to proxy calls to\\n    function setERC721Implementation(address implementation) public onlyOwner {\\n        _setERC721Implementation(implementation);\\n    }\\n\\n    /// @notice Setter for the ERC721Slim Implementation\\n    /// @param implementation the address to proxy calls to\\n    function setERC721SlimImplementation(address implementation)\\n        public\\n        onlyOwner\\n    {\\n        _setERC721SlimImplementation(implementation);\\n    }\\n\\n    /// @notice Setter for the ERC1155 Implementation\\n    /// @param implementation the address to proxy calls to\\n    function setERC1155Implementation(address implementation) public onlyOwner {\\n        _setERC1155Implementation(implementation);\\n    }\\n\\n    /// @notice Setter for the ERC721 OpenSea registry / proxy\\n    /// @param proxy the address of the proxy\\n    function setERC721ProxyRegistry(address proxy) public onlyOwner {\\n        _openseaERC721ProxyRegistry = proxy;\\n    }\\n\\n    /// @notice Setter for the ERC1155 OpenSea registry / proxy\\n    /// @param proxy the address of the proxy\\n    function setERC1155ProxyRegistry(address proxy) public onlyOwner {\\n        _openseaERC1155ProxyRegistry = proxy;\\n    }\\n\\n    /// @notice Helper to add an official module to the list\\n    /// @param module address of the module to add to the list\\n    function addModule(address module) external onlyOwner {\\n        if (_modules.add(module)) {\\n            emit ModuleAdded(module);\\n        }\\n    }\\n\\n    /// @notice Helper to remove an official module from the list\\n    /// @param module address of the module to remove from the list\\n    function removeModule(address module) external onlyOwner {\\n        if (_modules.remove(module)) {\\n            emit ModuleRemoved(module);\\n        }\\n    }\\n\\n    /// @notice Allows to change the slug for a registry\\n    /// @dev only someone with Editor role on registry can call this\\n    /// @param slug the slug for the collection.\\n    ///        be aware that slugs will only work in the frontend if\\n    ///        they are composed of a-zA-Z0-9 and -\\n    ///        with no double dashed (--) allowed.\\n    ///        Any other character will render the slug invalid.\\n    /// @param registry the collection to link the slug with\\n    function setSlug(string memory slug, address registry) public {\\n        bytes32 bSlug = keccak256(bytes(slug));\\n\\n        // verifies that the slug is not already in use\\n        require(_slugsToRegistry[bSlug] == address(0), '!SLUG_IN_USE!');\\n\\n        // verifies that the sender is a collection Editor or Owner\\n        require(\\n            INiftyForge721(payable(registry)).canEdit(msg.sender),\\n            '!NOT_EDITOR!'\\n        );\\n\\n        // if the registry is already linked to a slug, free it\\n        bytes32 currentSlug = _registryToSlug[registry];\\n        if (currentSlug.length > 0) {\\n            delete _slugsToRegistry[currentSlug];\\n        }\\n\\n        // if the new slug is not empty\\n        if (bytes(slug).length > 0) {\\n            _slugsToRegistry[bSlug] = registry;\\n            _registryToSlug[registry] = bSlug;\\n        } else {\\n            // remove registry to slug\\n            delete _registryToSlug[registry];\\n        }\\n\\n        emit RegistrySlug(registry, slug);\\n    }\\n\\n    /// @dev internal setter for the ERC721 Implementation\\n    /// @param implementation the address to proxy calls to\\n    function _setERC721Implementation(address implementation) internal {\\n        _erc721Implementation = implementation;\\n    }\\n\\n    /// @dev internal setter for the ERC721Slim Implementation\\n    /// @param implementation the address to proxy calls to\\n    function _setERC721SlimImplementation(address implementation) internal {\\n        _erc721SlimImplementation = implementation;\\n    }\\n\\n    /// @dev internal setter for the ERC1155 Implementation\\n    /// @param implementation the address to proxy calls to\\n    function _setERC1155Implementation(address implementation) internal {\\n        _erc1155Implementation = implementation;\\n    }\\n\\n    /// @dev internal setter for new registries; emits an event RegistryCreated\\n    /// @param registry the new registry address\\n    function _addRegistry(address registry, string memory context) internal {\\n        _registries.add(registry);\\n        emit RegistryCreated(registry, context);\\n    }\\n}\\n\",\"keccak256\":\"0xf491d74ab9f23c60f46f1d58073e9c162ad1b1254f4f5501790c04e2e800c890\",\"license\":\"MIT\"},\"contracts/ForgeMaster/ForgeMasterStorage.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol';\\n\\n/// @title ForgeMasterStorage\\n/// @author Simon Fremaux (@dievardump)\\ncontract ForgeMasterStorage {\\n    // if creation is locked or not\\n    bool internal _locked;\\n\\n    // fee to pay to create a contract\\n    uint256 internal _fee;\\n\\n    // how many creations are still free\\n    uint256 internal _freeCreations;\\n\\n    // current ERC721 implementation\\n    address internal _erc721Implementation;\\n\\n    // current ERC1155 implementation\\n    // although this won't be used at the start\\n    address internal _erc1155Implementation;\\n\\n    // opensea erc721 ProxyRegistry / Proxy contract address\\n    address internal _openseaERC721ProxyRegistry;\\n\\n    // opensea erc1155 ProxyRegistry / Proxy contract address\\n    address internal _openseaERC1155ProxyRegistry;\\n\\n    // list of all registries created\\n    EnumerableSetUpgradeable.AddressSet internal _registries;\\n\\n    // list of all \\\"official\\\" modules\\n    EnumerableSetUpgradeable.AddressSet internal _modules;\\n\\n    // slugs used for registries\\n    mapping(bytes32 => address) internal _slugsToRegistry;\\n    mapping(address => bytes32) internal _registryToSlug;\\n\\n    // this is used for the reindexing requests\\n    mapping(address => uint256) public lastIndexing;\\n\\n    // Flagging might be used if there  are abuses, and we need a way to \\\"flag\\\" elements\\n    // in The Graph\\n\\n    // used to flag a registry\\n    mapping(address => bool) public flaggedRegistries;\\n\\n    // used to flag a token in a registry\\n    mapping(address => mapping(uint256 => bool)) internal _flaggedTokens;\\n\\n    address internal _erc721SlimImplementation;\\n\\n    // gap\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xfc10307c28264d9b4586fd596bb8f8282eeaf5896f20c71a4487d7639ea953c9\",\"license\":\"MIT\"},\"contracts/IForgeMaster.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport './INiftyForge721.sol';\\n\\n/// @title IForgeMaster\\n/// @author Simon Fremaux (@dievardump)\\n/// @notice Interface to interact with the current ForgeMaster on a network\\ninterface IForgeMaster {\\n    /// @notice Helper to know if the contract is locked\\n    /// @return if the contract is locked for new creations or not\\n    function isLocked() external view returns (bool);\\n\\n    /// @notice Getter for the ERC721 Implementation\\n    function getERC721Implementation() external view returns (address);\\n\\n    /// @notice Getter for the ERC1155 Implementation\\n    function getERC1155Implementation() external view returns (address);\\n\\n    /// @notice Getter for the ERC721 OpenSea registry / proxy\\n    function getERC721ProxyRegistry() external view returns (address);\\n\\n    /// @notice Getter for the ERC1155 OpenSea registry / proxy\\n    function getERC1155ProxyRegistry() external view returns (address);\\n\\n    /// @notice allows to check if a slug can be used\\n    /// @param slug the slug to check\\n    /// @return if the slug is used\\n    function isSlugFree(string memory slug) external view returns (bool);\\n\\n    /// @notice returns a registry address from a slug\\n    /// @param slug the slug to get the registry address\\n    /// @return the registry address\\n    function getRegistryBySlug(string memory slug)\\n        external\\n        view\\n        returns (address);\\n\\n    /// @notice Helper to list all registries\\n    /// @param startAt the index to start at (will come in handy if one day we have too many contracts)\\n    /// @param limit the number of elements we request\\n    /// @return list of registries\\n    function listRegistries(uint256 startAt, uint256 limit)\\n        external\\n        view\\n        returns (address[] memory list);\\n\\n    /// @notice Helper to list all modules\\n    /// @return list of modules\\n    function listModules() external view returns (address[] memory list);\\n\\n    /// @notice helper to know if a token is flagged\\n    /// @param registry the registry\\n    /// @param tokenId the tokenId\\n    function isTokenFlagged(address registry, uint256 tokenId)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @notice Creates a new NiftyForge721\\n    /// @dev the contract created is a minimal proxy to the _erc721Implementation\\n    /// @param name_ name of the contract (see ERC721)\\n    /// @param symbol_ symbol of the contract (see ERC721)\\n    /// @param contractURI_ The contract URI (containing its metadata) - can be empty \\\"\\\"\\n    /// @param baseURI_ The contract base URI (where to find the NFTs) - can be empty \\\"\\\"\\n    /// @param owner_ Address to whom transfer ownership\\n    /// @param modulesInit array of ModuleInit\\n    /// @param contractRoyaltiesRecipient the recipient, if the contract has \\\"contract wide royalties\\\"\\n    /// @param contractRoyaltiesValue the value, modules to add / enable directly at creation\\n    /// @return newContract the address of the new contract\\n    function createERC721(\\n        string memory name_,\\n        string memory symbol_,\\n        string memory contractURI_,\\n        string memory baseURI_,\\n        address owner_,\\n        INiftyForge721.ModuleInit[] memory modulesInit,\\n        address contractRoyaltiesRecipient,\\n        uint256 contractRoyaltiesValue,\\n        string memory slug,\\n        string memory context\\n    ) external returns (address newContract);\\n\\n    /// @notice Creates a new NiftyForge721Slim\\n    /// @dev the contract created is a minimal proxy to the _erc721SlimImplementation\\n    /// @param name_ name of the contract (see ERC721)\\n    /// @param symbol_ symbol of the contract (see ERC721)\\n    /// @param contractURI_ The contract URI (containing its metadata) - can be empty \\\"\\\"\\n    /// @param baseURI_ The contract base URI (where to find the NFTs) - can be empty \\\"\\\"\\n    /// @param owner_ Address to whom transfer ownership\\n    /// @param minter Address that  will be minting on the registry; Usually a module.\\n    /// @param contractRoyaltiesRecipient the recipient, if the contract has \\\"contract wide royalties\\\"\\n    /// @param contractRoyaltiesValue the value, modules to add / enable directly at creation\\n    /// @return newContract the address of the new contract\\n    function createERC721Slim(\\n        string memory name_,\\n        string memory symbol_,\\n        string memory contractURI_,\\n        string memory baseURI_,\\n        address owner_,\\n        address minter,\\n        address contractRoyaltiesRecipient,\\n        uint256 contractRoyaltiesValue,\\n        string memory slug,\\n        string memory context\\n    ) external returns (address newContract);\\n\\n    /// @notice Method allowing an editor to ask for reindexing on a regisytry\\n    ///         (for example if baseURI changes)\\n    ///         This will be listen to by the NiftyForgeMetadata graph, and launch;\\n    ///         - either a reindexation of alist of tokenIds (if tokenIds.length != 0)\\n    ///         - a full reindexation if tokenIds.length == 0\\n    ///         This can be very long and block the indexer\\n    ///         so calling this with a list of tokenIds > 10 or for a full reindexation is limited\\n    ///         Abuse on this function can also result in the Registry banned.\\n    ///         Only an Editor on the Registry can request a full reindexing\\n    /// @param registry the registry to reindex\\n    /// @param tokenIds the ids to reindex. If empty, will try to reindex all tokens for this registry\\n    function forceReindexing(address registry, uint256[] memory tokenIds)\\n        external;\\n\\n    /// @notice Method allowing to flag a registry\\n    /// @param registry the registry to flag\\n    /// @param reason the reason to flag\\n    function flagRegistry(address registry, string memory reason) external;\\n\\n    /// @notice Method allowing this owner, or an editor of the registry, to flag a token\\n    /// @param registry the registry to flag\\n    /// @param tokenId the tokenId\\n    /// @param reason the reason to flag\\n    function flagToken(\\n        address registry,\\n        uint256 tokenId,\\n        string memory reason\\n    ) external;\\n\\n    /// @notice Setter for owner to stop the registries creation or not\\n    /// @param locked the new state\\n    function setLocked(bool locked) external;\\n\\n    /// @notice Setter for the ERC721 Implementation\\n    /// @param implementation the address to proxy calls to\\n    function setERC721Implementation(address implementation) external;\\n\\n    /// @notice Setter for the ERC1155 Implementation\\n    /// @param implementation the address to proxy calls to\\n    function setERC1155Implementation(address implementation) external;\\n\\n    /// @notice Setter for the ERC721 OpenSea registry / proxy\\n    /// @param proxy the address of the proxy\\n    function setERC721ProxyRegistry(address proxy) external;\\n\\n    /// @notice Setter for the ERC1155 OpenSea registry / proxy\\n    /// @param proxy the address of the proxy\\n    function setERC1155ProxyRegistry(address proxy) external;\\n\\n    /// @notice Helper to add an official module to the list\\n    /// @param module address of the module to add to the list\\n    function addModule(address module) external;\\n\\n    /// @notice Helper to remove an official module from the list\\n    /// @param module address of the module to remove from the list\\n    function removeModule(address module) external;\\n\\n    /// @notice Allows to change the slug for a registry\\n    /// @dev only someone with Editor role on registry can call this\\n    /// @param slug the slug for the collection.\\n    ///        be aware that slugs will only work in the frontend if\\n    ///        they are composed of a-zA-Z0-9 and -\\n    ///        with no double dashed (--) allowed.\\n    ///        Any other character will render the slug invalid.\\n    /// @param registry the collection to link the slug with\\n    function setSlug(string memory slug, address registry) external;\\n}\\n\",\"keccak256\":\"0xa1b6975c116cbf23a21af86f506732c20a83d1927d0628f826c8c64b2e4577c1\",\"license\":\"MIT\"},\"contracts/INiftyForge721.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport './NFT/IERC721Full.sol';\\n\\n/// @title INiftyForge721\\n/// @author Simon Fremaux (@dievardump)\\n/// @notice Interface to interact with a NiftyFroge721 on a network\\ninterface INiftyForge721 is IERC721Full {\\n    struct ModuleInit {\\n        address module;\\n        bool enabled;\\n        bool minter;\\n    }\\n\\n    /// @notice this is the constructor of the contract, called at the time of creation\\n    ///         Although it uses what are called upgradeable contracts, this is only to\\n    ///         be able to make deployment cheap using a Proxy but NiftyForge contracts\\n    ///         ARE NOT UPGRADEABLE => the proxy used is not an upgradeable proxy, the implementation is immutable\\n    /// @param name_ name of the contract (see ERC721)\\n    /// @param symbol_ symbol of the contract (see ERC721)\\n    /// @param contractURI_ The contract URI (containing its metadata) - can be empty \\\"\\\"\\n    /// @param baseURI_ the contract baseURI (if there is)  - can be empty \\\"\\\"\\n    /// @param owner_ Address to whom transfer ownership\\n    /// @param modulesInit_ modules to add / enable directly at creation\\n    /// @param contractRoyaltiesRecipient the recipient, if the contract has \\\"contract wide royalties\\\"\\n    /// @param contractRoyaltiesValue the value, modules to add / enable directly at creation\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        string memory contractURI_,\\n        string memory baseURI_,\\n        address owner_,\\n        ModuleInit[] memory modulesInit_,\\n        address contractRoyaltiesRecipient,\\n        uint256 contractRoyaltiesValue\\n    ) external;\\n\\n    /// @notice getter for the version of the implementation\\n    /// @return the current implementation version following the scheme 0x[erc][type][version]\\n    /// erc: 00 => ERC721 | 01 => ERC1155\\n    /// type: 00 => full | 01 => slim\\n    /// version: 00, 01, 02, 03...\\n    function version() external view returns (bytes3);\\n\\n    /// @notice totalSupply access\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @notice helper to know if everyone can mint or only minters\\n    function isMintingOpenToAll() external view returns (bool);\\n\\n    /// @notice Toggle minting open to all state\\n    /// @param isOpen if the new state is open or not\\n    function setMintingOpenToAll(bool isOpen) external;\\n\\n    /// @notice Allows to set a maximum number of mint possible\\n    function setMaxSupply(uint256 maxSupply_) external;\\n\\n    /// @notice Mint next token to `to`\\n    /// @param to address of recipient\\n    /// @return tokenId the tokenId\\n    function mint(address to) external returns (uint256 tokenId);\\n\\n    /// @notice Mint next token to `to` and then transfers to `transferTo`\\n    /// @param to address of first recipient\\n    /// @param transferTo address to transfer token to\\n    /// @return tokenId the tokenId\\n    function mint(address to, address transferTo)\\n        external\\n        returns (uint256 tokenId);\\n\\n    /// @notice Mint token to `to` with `uri`\\n    /// @param to address of recipient\\n    /// @param uri token metadata uri\\n    /// @param feeRecipient the recipient of royalties\\n    /// @param feeAmount the royalties amount. From 0 to 10000\\n    ///        where 10000 == 100.00%; 1000 == 10.00%; 250 == 2.50%\\n    /// @param transferTo the address to transfer the NFT to after mint\\n    ///        this is used when we want to mint the NFT to the creator address\\n    ///        before transferring it to a recipient\\n    /// @return tokenId the tokenId\\n    function mint(\\n        address to,\\n        string memory uri,\\n        address feeRecipient,\\n        uint256 feeAmount,\\n        address transferTo\\n    ) external returns (uint256 tokenId);\\n\\n    /// @notice Mint batch tokens to `to[i]` with `uri[i]`\\n    /// @param to array of address of recipients\\n    /// @param uris array of token metadata uris\\n    /// @param feeRecipients the recipients of royalties for each id\\n    /// @param feeAmounts the royalties amounts for each id. From 0 to 10000\\n    ///        where 10000 == 100.00%; 1000 == 10.00%; 250 == 2.50%\\n    /// @return startId the first id\\n    /// @return endId the last id\\n    function mintBatch(\\n        address[] memory to,\\n        string[] memory uris,\\n        address[] memory feeRecipients,\\n        uint256[] memory feeAmounts\\n    ) external returns (uint256 startId, uint256 endId);\\n\\n    /// @notice Mint `tokenId` to to` with `uri`\\n    ///         Because not all tokenIds have incremental ids\\n    ///         be careful with this function, it does not increment lastTokenId\\n    ///         and expects the minter to actually know what it is doing.\\n    ///         this also means, this function does not verify _maxTokenId\\n    /// @param to address of recipient\\n    /// @param uri token metadata uri\\n    /// @param tokenId token id wanted\\n    /// @param feeRecipient the recipient of royalties\\n    /// @param feeAmount the royalties amount. From 0 to 10000\\n    ///        where 10000 == 100.00%; 1000 == 10.00%; 250 == 2.50%\\n    /// @param transferTo the address to transfer the NFT to after mint\\n    ///        this is used when we want to mint the NFT to the creator address\\n    ///        before transferring it to a recipient\\n    /// @return tokenId the tokenId\\n    function mint(\\n        address to,\\n        string memory uri,\\n        uint256 tokenId_,\\n        address feeRecipient,\\n        uint256 feeAmount,\\n        address transferTo\\n    ) external returns (uint256 tokenId);\\n\\n    /// @notice Mint batch tokens to `to[i]` with `uris[i]`\\n    ///         Because not all tokenIds have incremental ids\\n    ///         be careful with this function, it does not increment lastTokenId\\n    ///         and expects the minter to actually know what it's doing.\\n    ///         this also means, this function does not verify _maxTokenId\\n    /// @param to array of address of recipients\\n    /// @param uris array of token metadata uris\\n    /// @param tokenIds array of token ids wanted\\n    /// @param feeRecipients the recipients of royalties for each id\\n    /// @param feeAmounts the royalties amounts for each id. From 0 to 10000\\n    ///        where 10000 == 100.00%; 1000 == 10.00%; 250 == 2.50%\\n    function mintBatch(\\n        address[] memory to,\\n        string[] memory uris,\\n        uint256[] memory tokenIds,\\n        address[] memory feeRecipients,\\n        uint256[] memory feeAmounts\\n    ) external;\\n\\n    /// @notice Attach a module\\n    /// @param module a module to attach\\n    /// @param enabled if the module is enabled by default\\n    /// @param canModuleMint if the module has to be given the minter role\\n    function attachModule(\\n        address module,\\n        bool enabled,\\n        bool canModuleMint\\n    ) external;\\n\\n    /// @dev Allows owner to enable a module\\n    /// @param module to enable\\n    /// @param canModuleMint if the module has to be given the minter role\\n    function enableModule(address module, bool canModuleMint) external;\\n\\n    /// @dev Allows owner to disable a module\\n    /// @param module to disable\\n    function disableModule(address module, bool keepListeners) external;\\n\\n    /// @notice allows to force the collection to start ids at 0\\n    function startAtZero() external;\\n\\n    /// @notice function that returns a string that can be used to render the current token\\n    /// @param tokenId tokenId\\n    /// @return the URI to render token\\n    function renderTokenURI(uint256 tokenId)\\n        external\\n        view\\n        returns (string memory);\\n}\\n\",\"keccak256\":\"0xf4224d5ad43bf47caaf9e202c3c93252e2013706d2580cd55517e18f0042d454\",\"license\":\"MIT\"},\"contracts/INiftyForge721Slim.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport './NFT/IERC721Slim.sol';\\n\\n/// @title INiftyForge721Slim\\n/// @author Simon Fremaux (@dievardump)\\ninterface INiftyForge721Slim is IERC721Slim {\\n    /// @notice this is the constructor of the contract, called at the time of creation\\n    ///         Although it uses what are called upgradeable contracts, this is only to\\n    ///         be able to make deployment cheap using a Proxy but NiftyForge contracts\\n    ///         ARE NOT UPGRADEABLE => the proxy used is not an upgradeable proxy, the implementation is immutable\\n    /// @param name_ name of the contract (see ERC721)\\n    /// @param symbol_ symbol of the contract (see ERC721)\\n    /// @param contractURI_ The contract URI (containing its metadata) - can be empty \\\"\\\"\\n    /// @param baseURI_ the contract baseURI (if there is)  - can be empty \\\"\\\"\\n    /// @param owner_ Address to whom transfer ownership\\n    /// @param minter_ The address that has the right to mint on this contract\\n    /// @param contractRoyaltiesRecipient the recipient, if the contract has \\\"contract wide royalties\\\"\\n    /// @param contractRoyaltiesValue the value, modules to add / enable directly at creation\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        string memory contractURI_,\\n        string memory baseURI_,\\n        address owner_,\\n        address minter_,\\n        address contractRoyaltiesRecipient,\\n        uint256 contractRoyaltiesValue\\n    ) external;\\n\\n    /// @notice getter for the version of the implementation\\n    /// @return the current implementation version following the scheme 0x[erc][type][version]\\n    /// erc: 00 => ERC721 | 01 => ERC1155\\n    /// type: 00 => full | 01 => slim\\n    /// version: 00, 01, 02, 03...\\n    function version() external view returns (bytes3);\\n\\n    /// @notice the module/address that can mint on this contract (if address(0) then owner())\\n    function minter() external view returns (address);\\n\\n    /// @notice how many tokens exists\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @notice how many tokens have been minted\\n    function minted() external view returns (uint256);\\n\\n    /// @notice maximum tokens that can be created on this contract\\n    function maxSupply() external view returns (uint256);\\n\\n    /// @notice Mint one token to `to`\\n    /// @param to the recipient\\n    /// @return tokenId the tokenId minted\\n    function mint(address to) external returns (uint256 tokenId);\\n\\n    /// @notice Mint one token to `to` and transfers to `transferTo`\\n    /// @param to the first recipient\\n    /// @param transferTo the end recipient\\n    /// @return tokenId the tokenId minted\\n    function mint(address to, address transferTo)\\n        external\\n        returns (uint256 tokenId);\\n\\n    /// @notice Mint `count` tokens to `to`\\n    /// @param to array of address of recipients\\n    /// @return startId and endId\\n    function mintBatch(address to, uint256 count)\\n        external\\n        returns (uint256 startId, uint256 endId);\\n}\\n\",\"keccak256\":\"0x0ed22199444566dec5bc39fd56b6cabd242cea11890a9044aa36cad1656b4a10\",\"license\":\"MIT\"},\"contracts/NFT/ERC721/IERC721WithMutableURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/// @dev This is the interface for NFT extension mutableURI\\n/// @author Simon Fremaux (@dievardump)\\ninterface IERC721WithMutableURI {\\n    function mutableURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xdf8c90f20cf112d477fb850cd89e9590fb47f43c42958aa37523029e0f64bcfd\",\"license\":\"MIT\"},\"contracts/NFT/ERC721/IERC721WithRoyalties.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport '../Royalties/ERC2981/IERC2981Royalties.sol';\\nimport '../Royalties/RaribleSecondarySales/IRaribleSecondarySales.sol';\\nimport '../Royalties/FoundationSecondarySales/IFoundationSecondarySales.sol';\\n\\n/// @dev This is a contract used for royalties on various platforms\\n/// @author Simon Fremaux (@dievardump)\\ninterface IERC721WithRoyalties is\\n    IERC2981Royalties,\\n    IRaribleSecondarySales,\\n    IFoundationSecondarySales\\n{\\n\\n}\\n\",\"keccak256\":\"0xaf0179761614e73c0bd125004b180df9c334cb48102b3a9efe7250d8f8b64530\",\"license\":\"MIT\"},\"contracts/NFT/IERC721Full.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol';\\n\\nimport './ERC721/IERC721WithRoyalties.sol';\\nimport './ERC721/IERC721WithMutableURI.sol';\\n\\n/// @title ERC721Full\\n/// @dev This contains all the different overrides needed on\\n///      ERC721 / URIStorage / Royalties\\n///      This contract does not use ERC721enumerable because Enumerable adds quite some\\n///      gas to minting costs and I am trying to make this cheap for creators.\\n///      Also, since all NiftyForge contracts will be fully indexed in TheGraph it will easily\\n///      Be possible to get tokenIds of an owner off-chain, before passing them to a contract\\n///      which can verify ownership at the processing time\\n/// @author Simon Fremaux (@dievardump)\\ninterface IERC721Full is\\n    IERC721Upgradeable,\\n    IERC721WithRoyalties,\\n    IERC721WithMutableURI\\n{\\n    function baseURI() external view returns (string memory);\\n\\n    function contractURI() external view returns (string memory);\\n\\n    /// @notice This is a generic function that allows this contract's owner to withdraw\\n    ///         any balance / ERC20 / ERC721 / ERC1155 it can have\\n    ///         this contract has no payable nor receive function so it should not get any nativ token\\n    ///         but this could save some ERC20, 721 or 1155\\n    /// @param token the token to withdraw from. address(0) means native chain token\\n    /// @param amount the amount to withdraw if native token, erc20 or erc1155 - must be 0 for ERC721\\n    /// @param tokenId the tokenId to withdraw for ERC1155 and ERC721\\n    function withdraw(\\n        address token,\\n        uint256 amount,\\n        uint256 tokenId\\n    ) external;\\n\\n    /// @notice Helper to know if an address can do the action an Editor can\\n    /// @param account the address to check\\n    function canEdit(address account) external view returns (bool);\\n\\n    /// @notice Helper to know if an address can do the action a Minter can\\n    /// @param account the address to check\\n    function canMint(address account) external view returns (bool);\\n\\n    /// @notice Helper to know if an address is editor\\n    /// @param account the address to check\\n    function isEditor(address account) external view returns (bool);\\n\\n    /// @notice Helper to know if an address is minter\\n    /// @param account the address to check\\n    function isMinter(address account) external view returns (bool);\\n\\n    /// @notice Allows to get approved using a permit and transfer in the same call\\n    /// @dev this supposes that the permit is for msg.sender\\n    /// @param from current owner\\n    /// @param to recipient\\n    /// @param tokenId the token id\\n    /// @param _data optional data to add\\n    /// @param deadline the deadline for the permit to be used\\n    /// @param signature of permit\\n    function safeTransferFromWithPermit(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data,\\n        uint256 deadline,\\n        bytes memory signature\\n    ) external;\\n\\n    /// @notice Set the base token URI\\n    /// @dev only an editor can do that (account or module)\\n    /// @param baseURI_ the new base token uri used in tokenURI()\\n    function setBaseURI(string memory baseURI_) external;\\n\\n    /// @notice Set the base mutable meta URI for tokens\\n    /// @param baseMutableURI_ the new base for mutable meta uri used in mutableURI()\\n    function setBaseMutableURI(string memory baseMutableURI_) external;\\n\\n    /// @notice Set the mutable URI for a token\\n    /// @dev    Mutable URI work like tokenURI\\n    ///         -> if there is a baseMutableURI and a mutableURI, concat baseMutableURI + mutableURI\\n    ///         -> else if there is only mutableURI, return mutableURI\\n    //.         -> else if there is only baseMutableURI, concat baseMutableURI + tokenId\\n    /// @dev only an editor (account or module) can call this\\n    /// @param tokenId the token to set the mutable URI for\\n    /// @param mutableURI_ the mutable URI\\n    function setMutableURI(uint256 tokenId, string memory mutableURI_) external;\\n\\n    /// @notice Helper for the owner to add new editors\\n    /// @dev needs to be owner\\n    /// @param users list of new editors\\n    function addEditors(address[] memory users) external;\\n\\n    /// @notice Helper for the owner to remove editors\\n    /// @dev needs to be owner\\n    /// @param users list of removed editors\\n    function removeEditors(address[] memory users) external;\\n\\n    /// @notice Helper for an editor to add new minter\\n    /// @dev needs to be owner\\n    /// @param users list of new minters\\n    function addMinters(address[] memory users) external;\\n\\n    /// @notice Helper for an editor to remove minters\\n    /// @dev needs to be owner\\n    /// @param users list of removed minters\\n    function removeMinters(address[] memory users) external;\\n\\n    /// @notice Allows to change the default royalties recipient\\n    /// @dev an editor can call this\\n    /// @param recipient new default royalties recipient\\n    function setDefaultRoyaltiesRecipient(address recipient) external;\\n\\n    /// @notice Allows a royalty recipient of a token to change their recipient address\\n    /// @dev only the current token royalty recipient can change the address\\n    /// @param tokenId the token to change the recipient for\\n    /// @param recipient new default royalties recipient\\n    function setTokenRoyaltiesRecipient(uint256 tokenId, address recipient)\\n        external;\\n\\n    /// @notice Helper for the owner of the contract to set the new contract URI\\n    /// @dev needs to be owner\\n    /// @param contractURI_ new contract URI\\n    function setContractURI(string memory contractURI_) external;\\n}\\n\",\"keccak256\":\"0x5e8624f387e6d189f7fb100f351f8e53ab143a57d166a1ea84ca031267c57cce\",\"license\":\"MIT\"},\"contracts/NFT/IERC721Slim.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol';\\nimport './ERC721/IERC721WithRoyalties.sol';\\n\\n/// @title ERC721Slim\\n/// @dev This is a \\\"slim\\\" version of an ERC721 for NiftyForge\\n///      Slim ERC721 do not have all the bells and whistle that the ERC721Full have\\n///      Slim is made for series (like PFPs or Generative series)\\n///      The mint starts from 1 and ups\\n///      Not even the owner can mint directly on this collection.\\n///      It has to be the module passed as initialization\\n/// @author Simon Fremaux (@dievardump)\\ninterface IERC721Slim is IERC721Upgradeable, IERC721WithRoyalties {\\n    function baseURI() external view returns (string memory);\\n\\n    function contractURI() external view returns (string memory);\\n\\n    // receive() external payable {}\\n\\n    /// @notice This is a generic function that allows this contract's owner to withdraw\\n    ///         any balance / ERC20 / ERC721 / ERC1155 it can have\\n    ///         this contract has no payable nor receive function so it should not get any nativ token\\n    ///         but this could save some ERC20, 721 or 1155\\n    /// @param token the token to withdraw from. address(0) means native chain token\\n    /// @param amount the amount to withdraw if native token, erc20 or erc1155 - must be 0 for ERC721\\n    /// @param tokenId the tokenId to withdraw for ERC1155 and ERC721\\n    function withdraw(\\n        address token,\\n        uint256 amount,\\n        uint256 tokenId\\n    ) external;\\n\\n    /// @notice Helper to know if an address can do the action an Editor can\\n    /// @param account the address to check\\n    function canEdit(address account) external view returns (bool);\\n\\n    /// @notice Allows to get approved using a permit and transfer in the same call\\n    /// @dev this supposes that the permit is for msg.sender\\n    /// @param from current owner\\n    /// @param to recipient\\n    /// @param tokenId the token id\\n    /// @param _data optional data to add\\n    /// @param deadline the deadline for the permit to be used\\n    /// @param signature of permit\\n    function safeTransferFromWithPermit(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data,\\n        uint256 deadline,\\n        bytes memory signature\\n    ) external;\\n\\n    /// @notice Set the base token URI\\n    /// @dev only an editor can do that (account or module)\\n    /// @param baseURI_ the new base token uri used in tokenURI()\\n    function setBaseURI(string memory baseURI_) external;\\n\\n    /// @notice Allows to change the default royalties recipient\\n    /// @dev an editor can call this\\n    /// @param recipient new default royalties recipient\\n    function setDefaultRoyaltiesRecipient(address recipient) external;\\n\\n    /// @notice Helper for the owner of the contract to set the new contract URI\\n    /// @dev needs to be owner\\n    /// @param contractURI_ new contract URI\\n    function setContractURI(string memory contractURI_) external;\\n}\\n\",\"keccak256\":\"0x8257498d97f62c078d667104637ff5ff18731a8c00e53ddb53178efd34541643\",\"license\":\"MIT\"},\"contracts/NFT/Royalties/ERC2981/IERC2981Royalties.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/// @title IERC2981Royalties\\n/// @dev Interface for the ERC2981 - Token Royalty standard\\ninterface IERC2981Royalties {\\n    /// @notice Called with the sale price to determine how much royalty\\n    //          is owed and to whom.\\n    /// @param _tokenId - the NFT asset queried for royalty information\\n    /// @param _value - the sale price of the NFT asset specified by _tokenId\\n    /// @return _receiver - address of who should be sent the royalty payment\\n    /// @return _royaltyAmount - the royalty payment amount for value sale price\\n    function royaltyInfo(uint256 _tokenId, uint256 _value)\\n        external\\n        view\\n        returns (address _receiver, uint256 _royaltyAmount);\\n}\\n\",\"keccak256\":\"0xe87706076de93b27b3973b1a736521f7c7acddff0ce2da033e4fe8d5c9a66af2\",\"license\":\"MIT\"},\"contracts/NFT/Royalties/FoundationSecondarySales/IFoundationSecondarySales.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IFoundationSecondarySales {\\n    /// @notice returns a list of royalties recipients and the amount\\n    /// @param tokenId the token Id to check for\\n    /// @return all the recipients and their basis points, for tokenId\\n    function getFees(uint256 tokenId)\\n        external\\n        view\\n        returns (address payable[] memory, uint256[] memory);\\n}\\n\",\"keccak256\":\"0x2e54b6e6c7fcde52e017cc8796b15ebc98c78af150623d5bbf2635cb6ec16a86\",\"license\":\"MIT\"},\"contracts/NFT/Royalties/RaribleSecondarySales/IRaribleSecondarySales.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IRaribleSecondarySales {\\n    /// @notice returns a list of royalties recipients\\n    /// @param tokenId the token Id to check for\\n    /// @return all the recipients for tokenId\\n    function getFeeRecipients(uint256 tokenId)\\n        external\\n        view\\n        returns (address payable[] memory);\\n\\n    /// @notice returns a list of royalties amounts\\n    /// @param tokenId the token Id to check for\\n    /// @return all the amounts for tokenId\\n    function getFeeBps(uint256 tokenId)\\n        external\\n        view\\n        returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x5b74479165046205d6a6f618732b2ead0ab3f2e653dc7c2a228240d08e96fe44\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506123a1806100206000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c80638da5cb5b11610104578063ab98cb91116100a2578063ee45454811610071578063ee45454814610418578063f2fde38b1461042b578063f3d2f9941461043e578063f58b41fa1461045157600080fd5b8063ab98cb91146103b1578063c5a2835d146103c4578063e80dac57146103d7578063ebed7dd3146103ea57600080fd5b8063a0632461116100de578063a06324611461036f578063a0918b3c14610382578063a4e2d63414610393578063a9a269d41461039e57600080fd5b80638da5cb5b1461033a5780639b84ec801461034b5780639ccaabf61461035e57600080fd5b8063426ce4121161017c578063715018a61161014b578063715018a6146102fb5780637d2405bb1461030357806384663e531461031657806385ee7ba61461032757600080fd5b8063426ce4121461029b5780634cfa6487146102c05780636314c120146102d5578063641254bd146102e857600080fd5b8063211e28b6116101b8578063211e28b61461024f57806321d4495d14610262578063355e446314610275578063367913791461028857600080fd5b80631792405d146101df57806318e3f5de146101f45780631ed86f191461023c575b600080fd5b6101f26101ed3660046118d7565b610474565b005b6102276102023660046119cf565b80516020918201206000908152607090915260409020546001600160a01b0316151590565b60405190151581526020015b60405180910390f35b6101f261024a3660046118d7565b6104c9565b6101f261025d366004611a19565b61053b565b6101f2610270366004611a36565b610578565b6101f2610283366004611a83565b610747565b6101f2610296366004611ad0565b610864565b606a546001600160a01b03165b6040516001600160a01b039091168152602001610233565b6102c8610a80565b6040516102339190611b26565b6102a86102e33660046119cf565b610b2b565b6101f26102f63660046118d7565b610ba9565b6101f2610bf1565b6101f26103113660046118d7565b610c27565b6068546001600160a01b03166102a8565b6101f2610335366004611b73565b610c6f565b6033546001600160a01b03166102a8565b6101f26103593660046118d7565b610d0b565b6069546001600160a01b03166102a8565b6101f261037d3660046118d7565b610d53565b606b546001600160a01b03166102a8565b60655460ff16610227565b6101f26103ac366004611bc2565b610dc4565b6101f26103bf3660046118d7565b610fa5565b6102a86103d2366004611d17565b610ff1565b6102c86103e5366004611e5e565b61116d565b61040a6103f83660046118d7565b60726020526000908152604090205481565b604051908152602001610233565b610227610426366004611e80565b61127f565b6101f26104393660046118d7565b6112ad565b6102a861044c366004611eaa565b611345565b61022761045f3660046118d7565b60736020526000908152604090205460ff1681565b6033546001600160a01b031633146104a75760405162461bcd60e51b815260040161049e90611f6f565b60405180910390fd5b606b80546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b031633146104f35760405162461bcd60e51b815260040161049e90611f6f565b6104fe606e82611466565b15610538576040516001600160a01b038216907fead6a006345da1073a106d5f32372d2d2204f46cb0b4bca8f5ebafcbbed12b8a90600090a25b50565b6033546001600160a01b031633146105655760405162461bcd60e51b815260040161049e90611f6f565b6065805460ff1916911515919091179055565b8151602080840191909120600081815260709092526040909120546001600160a01b0316156105d95760405162461bcd60e51b815260206004820152600d60248201526c21534c55475f494e5f5553452160981b604482015260640161049e565b604051630a9b245360e01b81523360048201526001600160a01b03831690630a9b24539060240160206040518083038186803b15801561061857600080fd5b505afa15801561062c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106509190611fa4565b61066c5760405162461bcd60e51b815260040161049e90611fc1565b6001600160a01b038216600090815260716020526040902054600081815260706020526040902080546001600160a01b03191690558351156106e657600082815260706020908152604080832080546001600160a01b0319166001600160a01b038816908117909155835260719091529020829055610700565b6001600160a01b0383166000908152607160205260408120555b826001600160a01b03167fe37648a46d06de2f30335ddc5016767bfa24ad089e73f8ece9ccefb54ad5e057856040516107399190612034565b60405180910390a250505050565b6033546001600160a01b031633146107715760405162461bcd60e51b815260040161049e90611f6f565b61077c606c83611482565b6107985760405162461bcd60e51b815260040161049e90612047565b6001600160a01b03821660009081526073602052604090205460ff16156108015760405162461bcd60e51b815260206004820152601a60248201527f2152454749535452595f414c52454144595f464c414747454421000000000000604482015260640161049e565b6001600160a01b03821660009081526073602052604090819020805460ff19166001179055517fe625e87faebb42432377cdf4c1c043dfbbb827f01178e8a2f03c8353ff11b60b9061085890849033908590612073565b60405180910390a15050565b61086f606c84611482565b61088b5760405162461bcd60e51b815260040161049e90612047565b6001600160a01b03831660009081526073602052604090205460ff16156108f45760405162461bcd60e51b815260206004820152601a60248201527f2152454749535452595f414c52454144595f464c414747454421000000000000604482015260640161049e565b6001600160a01b038316600090815260746020908152604080832085845290915290205460ff16156109685760405162461bcd60e51b815260206004820152601760248201527f21544f4b454e5f414c52454144595f464c414747454421000000000000000000604482015260640161049e565b6033546001600160a01b03163314806109f35750604051630a9b245360e01b81523360048201526001600160a01b03841690630a9b24539060240160206040518083038186803b1580156109bb57600080fd5b505afa1580156109cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f39190611fa4565b610a0f5760405162461bcd60e51b815260040161049e90611fc1565b6001600160a01b038316600090815260746020908152604080832085845290915290819020805460ff19166001179055517f0e2cf25cd9b779efedc23c9f83ac715c3dcf1336ebb9cbd61b08be3f5f292fdb90610a739085908590339086906120a8565b60405180910390a1505050565b60606000610a8e606e6114a4565b9050806001600160401b03811115610aa857610aa86118f2565b604051908082528060200260200182016040528015610ad1578160200160208202803683370190505b50915060005b81811015610b2657610aea606e826114ae565b838281518110610afc57610afc6120e5565b6001600160a01b039092166020928302919091019091015280610b1e81612111565b915050610ad7565b505090565b80516020808301919091206000818152607090925260408220546001600160a01b0316610b8b5760405162461bcd60e51b815260206004820152600e60248201526d21554e4b4e4f574e5f534c55472160901b604482015260640161049e565b6000908152607060205260409020546001600160a01b031692915050565b6033546001600160a01b03163314610bd35760405162461bcd60e51b815260040161049e90611f6f565b606880546001600160a01b0319166001600160a01b03831617905550565b6033546001600160a01b03163314610c1b5760405162461bcd60e51b815260040161049e90611f6f565b610c2560006114ba565b565b6033546001600160a01b03163314610c515760405162461bcd60e51b815260040161049e90611f6f565b606980546001600160a01b0319166001600160a01b03831617905550565b600054610100900460ff1680610c88575060005460ff16155b610ca45760405162461bcd60e51b815260040161049e9061212c565b600054610100900460ff16158015610cc6576000805461ffff19166101011790555b610cce61150c565b6065805460ff19168415151790556001600160a01b03821615610cf457610cf4826112ad565b8015610d06576000805461ff00191690555b505050565b6033546001600160a01b03163314610d355760405162461bcd60e51b815260040161049e90611f6f565b607580546001600160a01b0319166001600160a01b03831617905550565b6033546001600160a01b03163314610d7d5760405162461bcd60e51b815260040161049e90611f6f565b610d88606e82611587565b15610538576040516001600160a01b038216907f0a1ee69f55c33d8467c69ca59ce2007a737a88603d75392972520bf67cb513b890600090a250565b610dcf606c83611482565b610deb5760405162461bcd60e51b815260040161049e90612047565b6001600160a01b03821660009081526073602052604090205460ff1615610e495760405162461bcd60e51b815260206004820152601260248201527121464c41474745445f52454749535452592160701b604482015260640161049e565b80511580610e585750600a8151115b15610f74576001600160a01b03821660009081526072602052604090205462015180610e84824261217a565b11610ec45760405162461bcd60e51b815260206004820152601060248201526f21494e444558494e475f44454c41592160801b604482015260640161049e565b604051630a9b245360e01b81523360048201526001600160a01b03841690630a9b24539060240160206040518083038186803b158015610f0357600080fd5b505afa158015610f17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3b9190611fa4565b610f575760405162461bcd60e51b815260040161049e90611fc1565b506001600160a01b03821660009081526072602052604090204290555b7f035d90f6cb38077eb55e4cef4caa780d8517587e64cb520b220f259dd456ffae8282604051610858929190612191565b6033546001600160a01b03163314610fcf5760405162461bcd60e51b815260040161049e90611f6f565b606a80546001600160a01b0319166001600160a01b0392909216919091179055565b6068546000906001600160a01b031661104c5760405162461bcd60e51b815260206004820152601760248201527f214e4f5f3732315f494d504c454d454e544154494f4e21000000000000000000604482015260640161049e565b60655460ff16158061106857506033546001600160a01b031633145b61109f5760405162461bcd60e51b8152602060048201526008602482015267214c4f434b45442160c01b604482015260640161049e565b6068546110b4906001600160a01b031661159c565b9050806001600160a01b0316636ead3f088c8c8c8c60006001600160a01b03168d6001600160a01b031614156110ea57336110ec565b8c5b8c8c8c6040518963ffffffff1660e01b81526004016111129897969594939291906121da565b600060405180830381600087803b15801561112c57600080fd5b505af1158015611140573d6000803e3d6000fd5b5050505061114e8183611639565b82511561115f5761115f8382610578565b9a9950505050505050505050565b6060600061117b606c6114a4565b90508084106111b95760405162461bcd60e51b815260206004820152600a602482015269214f564552464c4f572160b01b604482015260640161049e565b806111c484866122bb565b11156111d7576111d4848261217a565b92505b826001600160401b038111156111ef576111ef6118f2565b604051908082528060200260200182016040528015611218578160200160208202803683370190505b50915060005b838110156112775761123b61123382876122bb565b606c906114ae565b83828151811061124d5761124d6120e5565b6001600160a01b03909216602092830291909101909101528061126f81612111565b91505061121e565b505092915050565b6001600160a01b038216600090815260746020908152604080832084845290915290205460ff165b92915050565b6033546001600160a01b031633146112d75760405162461bcd60e51b815260040161049e90611f6f565b6001600160a01b03811661133c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161049e565b610538816114ba565b6075546000906001600160a01b03166113a05760405162461bcd60e51b815260206004820152601b60248201527f214e4f5f373231534c494d5f494d504c454d454e544154494f4e210000000000604482015260640161049e565b60655460ff1615806113bc57506033546001600160a01b031633145b6113f35760405162461bcd60e51b8152602060048201526008602482015267214c4f434b45442160c01b604482015260640161049e565b607554611408906001600160a01b031661159c565b9050806001600160a01b031663c285c4428c8c8c8c60006001600160a01b03168d6001600160a01b0316141561143e5733611440565b8c5b8c8c8c6040518963ffffffff1660e01b81526004016111129897969594939291906122d3565b600061147b836001600160a01b03841661168a565b9392505050565b6001600160a01b0381166000908152600183016020526040812054151561147b565b60006112a7825490565b600061147b83836116d9565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1680611525575060005460ff16155b6115415760405162461bcd60e51b815260040161049e9061212c565b600054610100900460ff16158015611563576000805461ffff19166101011790555b61156b611703565b61157361176d565b8015610538576000805461ff001916905550565b600061147b836001600160a01b0384166117cd565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b0381166116345760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b604482015260640161049e565b919050565b611644606c83611466565b50816001600160a01b03167f9cbe1f94226d9017b1e95b6529c3c02e89030c93a2039fd800580237d919913f8260405161167e9190612034565b60405180910390a25050565b60008181526001830160205260408120546116d1575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556112a7565b5060006112a7565b60008260000182815481106116f0576116f06120e5565b9060005260206000200154905092915050565b600054610100900460ff168061171c575060005460ff16155b6117385760405162461bcd60e51b815260040161049e9061212c565b600054610100900460ff16158015611573576000805461ffff19166101011790558015610538576000805461ff001916905550565b600054610100900460ff1680611786575060005460ff16155b6117a25760405162461bcd60e51b815260040161049e9061212c565b600054610100900460ff161580156117c4576000805461ffff19166101011790555b611573336114ba565b600081815260018301602052604081205480156118b65760006117f160018361217a565b85549091506000906118059060019061217a565b905081811461186a576000866000018281548110611825576118256120e5565b9060005260206000200154905080876000018481548110611848576118486120e5565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061187b5761187b612355565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506112a7565b60009150506112a7565b80356001600160a01b038116811461163457600080fd5b6000602082840312156118e957600080fd5b61147b826118c0565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b038111828210171561192a5761192a6118f2565b60405290565b604051601f8201601f191681016001600160401b0381118282101715611958576119586118f2565b604052919050565b600082601f83011261197157600080fd5b81356001600160401b0381111561198a5761198a6118f2565b61199d601f8201601f1916602001611930565b8181528460208386010111156119b257600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156119e157600080fd5b81356001600160401b038111156119f757600080fd5b611a0384828501611960565b949350505050565b801515811461053857600080fd5b600060208284031215611a2b57600080fd5b813561147b81611a0b565b60008060408385031215611a4957600080fd5b82356001600160401b03811115611a5f57600080fd5b611a6b85828601611960565b925050611a7a602084016118c0565b90509250929050565b60008060408385031215611a9657600080fd5b611a9f836118c0565b915060208301356001600160401b03811115611aba57600080fd5b611ac685828601611960565b9150509250929050565b600080600060608486031215611ae557600080fd5b611aee846118c0565b92506020840135915060408401356001600160401b03811115611b1057600080fd5b611b1c86828701611960565b9150509250925092565b6020808252825182820181905260009190848201906040850190845b81811015611b675783516001600160a01b031683529284019291840191600101611b42565b50909695505050505050565b60008060408385031215611b8657600080fd5b8235611b9181611a0b565b9150611a7a602084016118c0565b60006001600160401b03821115611bb857611bb86118f2565b5060051b60200190565b60008060408385031215611bd557600080fd5b611bde836118c0565b91506020808401356001600160401b03811115611bfa57600080fd5b8401601f81018613611c0b57600080fd5b8035611c1e611c1982611b9f565b611930565b81815260059190911b82018301908381019088831115611c3d57600080fd5b928401925b82841015611c5b57833582529284019290840190611c42565b80955050505050509250929050565b600082601f830112611c7b57600080fd5b81356020611c8b611c1983611b9f565b82815260609283028501820192828201919087851115611caa57600080fd5b8387015b85811015611d0a5781818a031215611cc65760008081fd5b611cce611908565b611cd7826118c0565b815285820135611ce681611a0b565b81870152604082810135611cf981611a0b565b908201528452928401928101611cae565b5090979650505050505050565b6000806000806000806000806000806101408b8d031215611d3757600080fd5b8a356001600160401b0380821115611d4e57600080fd5b611d5a8e838f01611960565b9b5060208d0135915080821115611d7057600080fd5b611d7c8e838f01611960565b9a5060408d0135915080821115611d9257600080fd5b611d9e8e838f01611960565b995060608d0135915080821115611db457600080fd5b611dc08e838f01611960565b9850611dce60808e016118c0565b975060a08d0135915080821115611de457600080fd5b611df08e838f01611c6a565b9650611dfe60c08e016118c0565b955060e08d013594506101008d0135915080821115611e1c57600080fd5b611e288e838f01611960565b93506101208d0135915080821115611e3f57600080fd5b50611e4c8d828e01611960565b9150509295989b9194979a5092959850565b60008060408385031215611e7157600080fd5b50508035926020909101359150565b60008060408385031215611e9357600080fd5b611e9c836118c0565b946020939093013593505050565b6000806000806000806000806000806101408b8d031215611eca57600080fd5b8a356001600160401b0380821115611ee157600080fd5b611eed8e838f01611960565b9b5060208d0135915080821115611f0357600080fd5b611f0f8e838f01611960565b9a5060408d0135915080821115611f2557600080fd5b611f318e838f01611960565b995060608d0135915080821115611f4757600080fd5b611f538e838f01611960565b9850611f6160808e016118c0565b9750611df060a08e016118c0565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215611fb657600080fd5b815161147b81611a0b565b6020808252600c908201526b214e4f545f454449544f522160a01b604082015260600190565b6000815180845260005b8181101561200d57602081850181015186830182015201611ff1565b8181111561201f576000602083870101525b50601f01601f19169290920160200192915050565b60208152600061147b6020830184611fe7565b60208082526012908201527121554e4b4e4f574e5f52454749535452592160701b604082015260600190565b6001600160a01b0384811682528316602082015260606040820181905260009061209f90830184611fe7565b95945050505050565b6001600160a01b03858116825260208201859052831660408201526080606082018190526000906120db90830184611fe7565b9695505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415612125576121256120fb565b5060010190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60008282101561218c5761218c6120fb565b500390565b6001600160a01b038316815260406020808301829052835191830182905260009184820191906060850190845b81811015611d0a578451835293830193918301916001016121be565b60006101008083526121ee8184018c611fe7565b9050602083820381850152612203828c611fe7565b9150604084830381860152612218838c611fe7565b925060608584038187015261222d848c611fe7565b6001600160a01b038b8116608089015287820360a08901528a51808352858c019650909185019060005b8181101561228a578751805185168452878101511515888501528601511515868401529686019691840191600101612257565b50506001600160a01b038a1660c089015295506122a8945050505050565b8260e08301529998505050505050505050565b600082198211156122ce576122ce6120fb565b500190565b60006101008083526122e78184018c611fe7565b905082810360208401526122fb818b611fe7565b9050828103604084015261230f818a611fe7565b905082810360608401526123238189611fe7565b6001600160a01b03978816608085015295871660a084015250509190931660c082015260e00191909152949350505050565b634e487b7160e01b600052603160045260246000fdfea264697066735822122004c7ba4f7c5bd0539befc85669947e62ac4546563dff462fea0a9078db7f8d9e64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c80638da5cb5b11610104578063ab98cb91116100a2578063ee45454811610071578063ee45454814610418578063f2fde38b1461042b578063f3d2f9941461043e578063f58b41fa1461045157600080fd5b8063ab98cb91146103b1578063c5a2835d146103c4578063e80dac57146103d7578063ebed7dd3146103ea57600080fd5b8063a0632461116100de578063a06324611461036f578063a0918b3c14610382578063a4e2d63414610393578063a9a269d41461039e57600080fd5b80638da5cb5b1461033a5780639b84ec801461034b5780639ccaabf61461035e57600080fd5b8063426ce4121161017c578063715018a61161014b578063715018a6146102fb5780637d2405bb1461030357806384663e531461031657806385ee7ba61461032757600080fd5b8063426ce4121461029b5780634cfa6487146102c05780636314c120146102d5578063641254bd146102e857600080fd5b8063211e28b6116101b8578063211e28b61461024f57806321d4495d14610262578063355e446314610275578063367913791461028857600080fd5b80631792405d146101df57806318e3f5de146101f45780631ed86f191461023c575b600080fd5b6101f26101ed3660046118d7565b610474565b005b6102276102023660046119cf565b80516020918201206000908152607090915260409020546001600160a01b0316151590565b60405190151581526020015b60405180910390f35b6101f261024a3660046118d7565b6104c9565b6101f261025d366004611a19565b61053b565b6101f2610270366004611a36565b610578565b6101f2610283366004611a83565b610747565b6101f2610296366004611ad0565b610864565b606a546001600160a01b03165b6040516001600160a01b039091168152602001610233565b6102c8610a80565b6040516102339190611b26565b6102a86102e33660046119cf565b610b2b565b6101f26102f63660046118d7565b610ba9565b6101f2610bf1565b6101f26103113660046118d7565b610c27565b6068546001600160a01b03166102a8565b6101f2610335366004611b73565b610c6f565b6033546001600160a01b03166102a8565b6101f26103593660046118d7565b610d0b565b6069546001600160a01b03166102a8565b6101f261037d3660046118d7565b610d53565b606b546001600160a01b03166102a8565b60655460ff16610227565b6101f26103ac366004611bc2565b610dc4565b6101f26103bf3660046118d7565b610fa5565b6102a86103d2366004611d17565b610ff1565b6102c86103e5366004611e5e565b61116d565b61040a6103f83660046118d7565b60726020526000908152604090205481565b604051908152602001610233565b610227610426366004611e80565b61127f565b6101f26104393660046118d7565b6112ad565b6102a861044c366004611eaa565b611345565b61022761045f3660046118d7565b60736020526000908152604090205460ff1681565b6033546001600160a01b031633146104a75760405162461bcd60e51b815260040161049e90611f6f565b60405180910390fd5b606b80546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b031633146104f35760405162461bcd60e51b815260040161049e90611f6f565b6104fe606e82611466565b15610538576040516001600160a01b038216907fead6a006345da1073a106d5f32372d2d2204f46cb0b4bca8f5ebafcbbed12b8a90600090a25b50565b6033546001600160a01b031633146105655760405162461bcd60e51b815260040161049e90611f6f565b6065805460ff1916911515919091179055565b8151602080840191909120600081815260709092526040909120546001600160a01b0316156105d95760405162461bcd60e51b815260206004820152600d60248201526c21534c55475f494e5f5553452160981b604482015260640161049e565b604051630a9b245360e01b81523360048201526001600160a01b03831690630a9b24539060240160206040518083038186803b15801561061857600080fd5b505afa15801561062c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106509190611fa4565b61066c5760405162461bcd60e51b815260040161049e90611fc1565b6001600160a01b038216600090815260716020526040902054600081815260706020526040902080546001600160a01b03191690558351156106e657600082815260706020908152604080832080546001600160a01b0319166001600160a01b038816908117909155835260719091529020829055610700565b6001600160a01b0383166000908152607160205260408120555b826001600160a01b03167fe37648a46d06de2f30335ddc5016767bfa24ad089e73f8ece9ccefb54ad5e057856040516107399190612034565b60405180910390a250505050565b6033546001600160a01b031633146107715760405162461bcd60e51b815260040161049e90611f6f565b61077c606c83611482565b6107985760405162461bcd60e51b815260040161049e90612047565b6001600160a01b03821660009081526073602052604090205460ff16156108015760405162461bcd60e51b815260206004820152601a60248201527f2152454749535452595f414c52454144595f464c414747454421000000000000604482015260640161049e565b6001600160a01b03821660009081526073602052604090819020805460ff19166001179055517fe625e87faebb42432377cdf4c1c043dfbbb827f01178e8a2f03c8353ff11b60b9061085890849033908590612073565b60405180910390a15050565b61086f606c84611482565b61088b5760405162461bcd60e51b815260040161049e90612047565b6001600160a01b03831660009081526073602052604090205460ff16156108f45760405162461bcd60e51b815260206004820152601a60248201527f2152454749535452595f414c52454144595f464c414747454421000000000000604482015260640161049e565b6001600160a01b038316600090815260746020908152604080832085845290915290205460ff16156109685760405162461bcd60e51b815260206004820152601760248201527f21544f4b454e5f414c52454144595f464c414747454421000000000000000000604482015260640161049e565b6033546001600160a01b03163314806109f35750604051630a9b245360e01b81523360048201526001600160a01b03841690630a9b24539060240160206040518083038186803b1580156109bb57600080fd5b505afa1580156109cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f39190611fa4565b610a0f5760405162461bcd60e51b815260040161049e90611fc1565b6001600160a01b038316600090815260746020908152604080832085845290915290819020805460ff19166001179055517f0e2cf25cd9b779efedc23c9f83ac715c3dcf1336ebb9cbd61b08be3f5f292fdb90610a739085908590339086906120a8565b60405180910390a1505050565b60606000610a8e606e6114a4565b9050806001600160401b03811115610aa857610aa86118f2565b604051908082528060200260200182016040528015610ad1578160200160208202803683370190505b50915060005b81811015610b2657610aea606e826114ae565b838281518110610afc57610afc6120e5565b6001600160a01b039092166020928302919091019091015280610b1e81612111565b915050610ad7565b505090565b80516020808301919091206000818152607090925260408220546001600160a01b0316610b8b5760405162461bcd60e51b815260206004820152600e60248201526d21554e4b4e4f574e5f534c55472160901b604482015260640161049e565b6000908152607060205260409020546001600160a01b031692915050565b6033546001600160a01b03163314610bd35760405162461bcd60e51b815260040161049e90611f6f565b606880546001600160a01b0319166001600160a01b03831617905550565b6033546001600160a01b03163314610c1b5760405162461bcd60e51b815260040161049e90611f6f565b610c2560006114ba565b565b6033546001600160a01b03163314610c515760405162461bcd60e51b815260040161049e90611f6f565b606980546001600160a01b0319166001600160a01b03831617905550565b600054610100900460ff1680610c88575060005460ff16155b610ca45760405162461bcd60e51b815260040161049e9061212c565b600054610100900460ff16158015610cc6576000805461ffff19166101011790555b610cce61150c565b6065805460ff19168415151790556001600160a01b03821615610cf457610cf4826112ad565b8015610d06576000805461ff00191690555b505050565b6033546001600160a01b03163314610d355760405162461bcd60e51b815260040161049e90611f6f565b607580546001600160a01b0319166001600160a01b03831617905550565b6033546001600160a01b03163314610d7d5760405162461bcd60e51b815260040161049e90611f6f565b610d88606e82611587565b15610538576040516001600160a01b038216907f0a1ee69f55c33d8467c69ca59ce2007a737a88603d75392972520bf67cb513b890600090a250565b610dcf606c83611482565b610deb5760405162461bcd60e51b815260040161049e90612047565b6001600160a01b03821660009081526073602052604090205460ff1615610e495760405162461bcd60e51b815260206004820152601260248201527121464c41474745445f52454749535452592160701b604482015260640161049e565b80511580610e585750600a8151115b15610f74576001600160a01b03821660009081526072602052604090205462015180610e84824261217a565b11610ec45760405162461bcd60e51b815260206004820152601060248201526f21494e444558494e475f44454c41592160801b604482015260640161049e565b604051630a9b245360e01b81523360048201526001600160a01b03841690630a9b24539060240160206040518083038186803b158015610f0357600080fd5b505afa158015610f17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3b9190611fa4565b610f575760405162461bcd60e51b815260040161049e90611fc1565b506001600160a01b03821660009081526072602052604090204290555b7f035d90f6cb38077eb55e4cef4caa780d8517587e64cb520b220f259dd456ffae8282604051610858929190612191565b6033546001600160a01b03163314610fcf5760405162461bcd60e51b815260040161049e90611f6f565b606a80546001600160a01b0319166001600160a01b0392909216919091179055565b6068546000906001600160a01b031661104c5760405162461bcd60e51b815260206004820152601760248201527f214e4f5f3732315f494d504c454d454e544154494f4e21000000000000000000604482015260640161049e565b60655460ff16158061106857506033546001600160a01b031633145b61109f5760405162461bcd60e51b8152602060048201526008602482015267214c4f434b45442160c01b604482015260640161049e565b6068546110b4906001600160a01b031661159c565b9050806001600160a01b0316636ead3f088c8c8c8c60006001600160a01b03168d6001600160a01b031614156110ea57336110ec565b8c5b8c8c8c6040518963ffffffff1660e01b81526004016111129897969594939291906121da565b600060405180830381600087803b15801561112c57600080fd5b505af1158015611140573d6000803e3d6000fd5b5050505061114e8183611639565b82511561115f5761115f8382610578565b9a9950505050505050505050565b6060600061117b606c6114a4565b90508084106111b95760405162461bcd60e51b815260206004820152600a602482015269214f564552464c4f572160b01b604482015260640161049e565b806111c484866122bb565b11156111d7576111d4848261217a565b92505b826001600160401b038111156111ef576111ef6118f2565b604051908082528060200260200182016040528015611218578160200160208202803683370190505b50915060005b838110156112775761123b61123382876122bb565b606c906114ae565b83828151811061124d5761124d6120e5565b6001600160a01b03909216602092830291909101909101528061126f81612111565b91505061121e565b505092915050565b6001600160a01b038216600090815260746020908152604080832084845290915290205460ff165b92915050565b6033546001600160a01b031633146112d75760405162461bcd60e51b815260040161049e90611f6f565b6001600160a01b03811661133c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161049e565b610538816114ba565b6075546000906001600160a01b03166113a05760405162461bcd60e51b815260206004820152601b60248201527f214e4f5f373231534c494d5f494d504c454d454e544154494f4e210000000000604482015260640161049e565b60655460ff1615806113bc57506033546001600160a01b031633145b6113f35760405162461bcd60e51b8152602060048201526008602482015267214c4f434b45442160c01b604482015260640161049e565b607554611408906001600160a01b031661159c565b9050806001600160a01b031663c285c4428c8c8c8c60006001600160a01b03168d6001600160a01b0316141561143e5733611440565b8c5b8c8c8c6040518963ffffffff1660e01b81526004016111129897969594939291906122d3565b600061147b836001600160a01b03841661168a565b9392505050565b6001600160a01b0381166000908152600183016020526040812054151561147b565b60006112a7825490565b600061147b83836116d9565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1680611525575060005460ff16155b6115415760405162461bcd60e51b815260040161049e9061212c565b600054610100900460ff16158015611563576000805461ffff19166101011790555b61156b611703565b61157361176d565b8015610538576000805461ff001916905550565b600061147b836001600160a01b0384166117cd565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b0381166116345760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b604482015260640161049e565b919050565b611644606c83611466565b50816001600160a01b03167f9cbe1f94226d9017b1e95b6529c3c02e89030c93a2039fd800580237d919913f8260405161167e9190612034565b60405180910390a25050565b60008181526001830160205260408120546116d1575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556112a7565b5060006112a7565b60008260000182815481106116f0576116f06120e5565b9060005260206000200154905092915050565b600054610100900460ff168061171c575060005460ff16155b6117385760405162461bcd60e51b815260040161049e9061212c565b600054610100900460ff16158015611573576000805461ffff19166101011790558015610538576000805461ff001916905550565b600054610100900460ff1680611786575060005460ff16155b6117a25760405162461bcd60e51b815260040161049e9061212c565b600054610100900460ff161580156117c4576000805461ffff19166101011790555b611573336114ba565b600081815260018301602052604081205480156118b65760006117f160018361217a565b85549091506000906118059060019061217a565b905081811461186a576000866000018281548110611825576118256120e5565b9060005260206000200154905080876000018481548110611848576118486120e5565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061187b5761187b612355565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506112a7565b60009150506112a7565b80356001600160a01b038116811461163457600080fd5b6000602082840312156118e957600080fd5b61147b826118c0565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b038111828210171561192a5761192a6118f2565b60405290565b604051601f8201601f191681016001600160401b0381118282101715611958576119586118f2565b604052919050565b600082601f83011261197157600080fd5b81356001600160401b0381111561198a5761198a6118f2565b61199d601f8201601f1916602001611930565b8181528460208386010111156119b257600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156119e157600080fd5b81356001600160401b038111156119f757600080fd5b611a0384828501611960565b949350505050565b801515811461053857600080fd5b600060208284031215611a2b57600080fd5b813561147b81611a0b565b60008060408385031215611a4957600080fd5b82356001600160401b03811115611a5f57600080fd5b611a6b85828601611960565b925050611a7a602084016118c0565b90509250929050565b60008060408385031215611a9657600080fd5b611a9f836118c0565b915060208301356001600160401b03811115611aba57600080fd5b611ac685828601611960565b9150509250929050565b600080600060608486031215611ae557600080fd5b611aee846118c0565b92506020840135915060408401356001600160401b03811115611b1057600080fd5b611b1c86828701611960565b9150509250925092565b6020808252825182820181905260009190848201906040850190845b81811015611b675783516001600160a01b031683529284019291840191600101611b42565b50909695505050505050565b60008060408385031215611b8657600080fd5b8235611b9181611a0b565b9150611a7a602084016118c0565b60006001600160401b03821115611bb857611bb86118f2565b5060051b60200190565b60008060408385031215611bd557600080fd5b611bde836118c0565b91506020808401356001600160401b03811115611bfa57600080fd5b8401601f81018613611c0b57600080fd5b8035611c1e611c1982611b9f565b611930565b81815260059190911b82018301908381019088831115611c3d57600080fd5b928401925b82841015611c5b57833582529284019290840190611c42565b80955050505050509250929050565b600082601f830112611c7b57600080fd5b81356020611c8b611c1983611b9f565b82815260609283028501820192828201919087851115611caa57600080fd5b8387015b85811015611d0a5781818a031215611cc65760008081fd5b611cce611908565b611cd7826118c0565b815285820135611ce681611a0b565b81870152604082810135611cf981611a0b565b908201528452928401928101611cae565b5090979650505050505050565b6000806000806000806000806000806101408b8d031215611d3757600080fd5b8a356001600160401b0380821115611d4e57600080fd5b611d5a8e838f01611960565b9b5060208d0135915080821115611d7057600080fd5b611d7c8e838f01611960565b9a5060408d0135915080821115611d9257600080fd5b611d9e8e838f01611960565b995060608d0135915080821115611db457600080fd5b611dc08e838f01611960565b9850611dce60808e016118c0565b975060a08d0135915080821115611de457600080fd5b611df08e838f01611c6a565b9650611dfe60c08e016118c0565b955060e08d013594506101008d0135915080821115611e1c57600080fd5b611e288e838f01611960565b93506101208d0135915080821115611e3f57600080fd5b50611e4c8d828e01611960565b9150509295989b9194979a5092959850565b60008060408385031215611e7157600080fd5b50508035926020909101359150565b60008060408385031215611e9357600080fd5b611e9c836118c0565b946020939093013593505050565b6000806000806000806000806000806101408b8d031215611eca57600080fd5b8a356001600160401b0380821115611ee157600080fd5b611eed8e838f01611960565b9b5060208d0135915080821115611f0357600080fd5b611f0f8e838f01611960565b9a5060408d0135915080821115611f2557600080fd5b611f318e838f01611960565b995060608d0135915080821115611f4757600080fd5b611f538e838f01611960565b9850611f6160808e016118c0565b9750611df060a08e016118c0565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215611fb657600080fd5b815161147b81611a0b565b6020808252600c908201526b214e4f545f454449544f522160a01b604082015260600190565b6000815180845260005b8181101561200d57602081850181015186830182015201611ff1565b8181111561201f576000602083870101525b50601f01601f19169290920160200192915050565b60208152600061147b6020830184611fe7565b60208082526012908201527121554e4b4e4f574e5f52454749535452592160701b604082015260600190565b6001600160a01b0384811682528316602082015260606040820181905260009061209f90830184611fe7565b95945050505050565b6001600160a01b03858116825260208201859052831660408201526080606082018190526000906120db90830184611fe7565b9695505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415612125576121256120fb565b5060010190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60008282101561218c5761218c6120fb565b500390565b6001600160a01b038316815260406020808301829052835191830182905260009184820191906060850190845b81811015611d0a578451835293830193918301916001016121be565b60006101008083526121ee8184018c611fe7565b9050602083820381850152612203828c611fe7565b9150604084830381860152612218838c611fe7565b925060608584038187015261222d848c611fe7565b6001600160a01b038b8116608089015287820360a08901528a51808352858c019650909185019060005b8181101561228a578751805185168452878101511515888501528601511515868401529686019691840191600101612257565b50506001600160a01b038a1660c089015295506122a8945050505050565b8260e08301529998505050505050505050565b600082198211156122ce576122ce6120fb565b500190565b60006101008083526122e78184018c611fe7565b905082810360208401526122fb818b611fe7565b9050828103604084015261230f818a611fe7565b905082810360608401526123238189611fe7565b6001600160a01b03978816608085015295871660a084015250509190931660c082015260e00191909152949350505050565b634e487b7160e01b600052603160045260246000fdfea264697066735822122004c7ba4f7c5bd0539befc85669947e62ac4546563dff462fea0a9078db7f8d9e64736f6c63430008090033",
  "devdoc": {
    "author": "Simon Fremaux (@dievardump)",
    "kind": "dev",
    "methods": {
      "addModule(address)": {
        "params": {
          "module": "address of the module to add to the list"
        }
      },
      "createERC721(string,string,string,string,address,(address,bool,bool)[],address,uint256,string,string)": {
        "details": "the contract created is a minimal proxy to the _erc721Implementation",
        "params": {
          "baseURI_": "The contract base URI (where to find the NFTs) - can be empty \"\"",
          "contractRoyaltiesRecipient": "the recipient, if the contract has \"contract wide royalties\"",
          "contractRoyaltiesValue": "the value, modules to add / enable directly at creation",
          "contractURI_": "The contract URI (containing its metadata) - can be empty \"\"",
          "modulesInit": "array of ModuleInit",
          "name_": "name of the contract (see ERC721)",
          "owner_": "Address to whom transfer ownership",
          "symbol_": "symbol of the contract (see ERC721)"
        },
        "returns": {
          "newContract": "the address of the new contract"
        }
      },
      "createERC721Slim(string,string,string,string,address,address,address,uint256,string,string)": {
        "details": "the contract created is a minimal proxy to the _erc721SlimImplementation",
        "params": {
          "baseURI_": "The contract base URI (where to find the NFTs) - can be empty \"\"",
          "contractRoyaltiesRecipient": "the recipient, if the contract has \"contract wide royalties\"",
          "contractRoyaltiesValue": "the value, modules to add / enable directly at creation",
          "contractURI_": "The contract URI (containing its metadata) - can be empty \"\"",
          "minter": "The address that has the right to mint on the collection (see INiftyForge721Slim)",
          "name_": "name of the contract (see ERC721)",
          "owner_": "Address to whom transfer ownership",
          "symbol_": "symbol of the contract (see ERC721)"
        },
        "returns": {
          "newContract": "the address of the new contract"
        }
      },
      "flagRegistry(address,string)": {
        "params": {
          "reason": "the reason to flag",
          "registry": "the registry to flag"
        }
      },
      "flagToken(address,uint256,string)": {
        "params": {
          "reason": "the reason to flag",
          "registry": "the registry to flag",
          "tokenId": "the tokenId"
        }
      },
      "forceReindexing(address,uint256[])": {
        "params": {
          "registry": "the registry to reindex",
          "tokenIds": "the ids to reindex. If empty, will try to reindex all tokens for this registry"
        }
      },
      "getRegistryBySlug(string)": {
        "params": {
          "slug": "the slug to get the registry address"
        },
        "returns": {
          "_0": "the registry address"
        }
      },
      "isLocked()": {
        "returns": {
          "_0": "if the contract is locked for new creations or not"
        }
      },
      "isSlugFree(string)": {
        "params": {
          "slug": "the slug to check"
        },
        "returns": {
          "_0": "if the slug is used"
        }
      },
      "isTokenFlagged(address,uint256)": {
        "params": {
          "registry": "the registry",
          "tokenId": "the tokenId"
        }
      },
      "listModules()": {
        "returns": {
          "list": "of modules"
        }
      },
      "listRegistries(uint256,uint256)": {
        "params": {
          "limit": "the number of elements we request",
          "startAt": "the index to start at (will come in handy if one day we have too many contracts)"
        },
        "returns": {
          "list": "of registries"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeModule(address)": {
        "params": {
          "module": "address of the module to remove from the list"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setERC1155Implementation(address)": {
        "params": {
          "implementation": "the address to proxy calls to"
        }
      },
      "setERC1155ProxyRegistry(address)": {
        "params": {
          "proxy": "the address of the proxy"
        }
      },
      "setERC721Implementation(address)": {
        "params": {
          "implementation": "the address to proxy calls to"
        }
      },
      "setERC721ProxyRegistry(address)": {
        "params": {
          "proxy": "the address of the proxy"
        }
      },
      "setERC721SlimImplementation(address)": {
        "params": {
          "implementation": "the address to proxy calls to"
        }
      },
      "setLocked(bool)": {
        "params": {
          "locked": "the new state"
        }
      },
      "setSlug(string,address)": {
        "details": "only someone with Editor role on registry can call this",
        "params": {
          "registry": "the collection to link the slug with",
          "slug": "the slug for the collection.        be aware that slugs will only work in the frontend if        they are composed of a-zA-Z0-9 and -        with no double dashed (--) allowed.        Any other character will render the slug invalid."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "ForgeMaster",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addModule(address)": {
        "notice": "Helper to add an official module to the list"
      },
      "createERC721(string,string,string,string,address,(address,bool,bool)[],address,uint256,string,string)": {
        "notice": "Creates a new NiftyForge721"
      },
      "createERC721Slim(string,string,string,string,address,address,address,uint256,string,string)": {
        "notice": "Creates a new NiftyForge721Slim"
      },
      "flagRegistry(address,string)": {
        "notice": "Method allowing to flag a registry"
      },
      "flagToken(address,uint256,string)": {
        "notice": "Method allowing this owner, or an editor of the registry, to flag a token"
      },
      "forceReindexing(address,uint256[])": {
        "notice": "Method allowing an editor to ask for reindexing on a regisytry         (for example if baseURI changes)         This will be listen to by the NiftyForgeMetadata graph, and launch;         - either a reindexation of alist of tokenIds (if tokenIds.length != 0)         - a full reindexation if tokenIds.length == 0         This can be very long and block the indexer         so calling this with a list of tokenIds > 10 or for a full reindexation is limited         Abuse on this function can also result in the Registry banned.         Only an Editor on the Registry can request a full reindexing"
      },
      "getERC1155Implementation()": {
        "notice": "Getter for the ERC1155 Implementation"
      },
      "getERC1155ProxyRegistry()": {
        "notice": "Getter for the ERC1155 OpenSea registry / proxy"
      },
      "getERC721Implementation()": {
        "notice": "Getter for the ERC721 Implementation"
      },
      "getERC721ProxyRegistry()": {
        "notice": "Getter for the ERC721 OpenSea registry / proxy"
      },
      "getRegistryBySlug(string)": {
        "notice": "returns a registry address from a slug"
      },
      "isLocked()": {
        "notice": "Helper to know if the contract is locked"
      },
      "isSlugFree(string)": {
        "notice": "allows to check if a slug can be used"
      },
      "isTokenFlagged(address,uint256)": {
        "notice": "helper to know if a token is flagged"
      },
      "listModules()": {
        "notice": "Helper to list all modules"
      },
      "listRegistries(uint256,uint256)": {
        "notice": "Helper to list all registries"
      },
      "removeModule(address)": {
        "notice": "Helper to remove an official module from the list"
      },
      "setERC1155Implementation(address)": {
        "notice": "Setter for the ERC1155 Implementation"
      },
      "setERC1155ProxyRegistry(address)": {
        "notice": "Setter for the ERC1155 OpenSea registry / proxy"
      },
      "setERC721Implementation(address)": {
        "notice": "Setter for the ERC721 Implementation"
      },
      "setERC721ProxyRegistry(address)": {
        "notice": "Setter for the ERC721 OpenSea registry / proxy"
      },
      "setERC721SlimImplementation(address)": {
        "notice": "Setter for the ERC721Slim Implementation"
      },
      "setLocked(bool)": {
        "notice": "Setter for owner to stop the registries creation or not"
      },
      "setSlug(string,address)": {
        "notice": "Allows to change the slug for a registry"
      }
    },
    "notice": "This contract allows anyone to create ERC721 contract with role management         modules, Permits, on-chain Royalties, for pretty cheap.         Those contract & nfts are all referenced in the same Subgraph that can be used to create         a small, customizable, Storefront for anyone that wishes to.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 224,
        "contract": "contracts/ForgeMaster.sol:ForgeMaster",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 227,
        "contract": "contracts/ForgeMaster.sol:ForgeMaster",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1973,
        "contract": "contracts/ForgeMaster.sol:ForgeMaster",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/ForgeMaster.sol:ForgeMaster",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/ForgeMaster.sol:ForgeMaster",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4910,
        "contract": "contracts/ForgeMaster.sol:ForgeMaster",
        "label": "_locked",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 4912,
        "contract": "contracts/ForgeMaster.sol:ForgeMaster",
        "label": "_fee",
        "offset": 0,
        "slot": "102",
        "type": "t_uint256"
      },
      {
        "astId": 4914,
        "contract": "contracts/ForgeMaster.sol:ForgeMaster",
        "label": "_freeCreations",
        "offset": 0,
        "slot": "103",
        "type": "t_uint256"
      },
      {
        "astId": 4916,
        "contract": "contracts/ForgeMaster.sol:ForgeMaster",
        "label": "_erc721Implementation",
        "offset": 0,
        "slot": "104",
        "type": "t_address"
      },
      {
        "astId": 4918,
        "contract": "contracts/ForgeMaster.sol:ForgeMaster",
        "label": "_erc1155Implementation",
        "offset": 0,
        "slot": "105",
        "type": "t_address"
      },
      {
        "astId": 4920,
        "contract": "contracts/ForgeMaster.sol:ForgeMaster",
        "label": "_openseaERC721ProxyRegistry",
        "offset": 0,
        "slot": "106",
        "type": "t_address"
      },
      {
        "astId": 4922,
        "contract": "contracts/ForgeMaster.sol:ForgeMaster",
        "label": "_openseaERC1155ProxyRegistry",
        "offset": 0,
        "slot": "107",
        "type": "t_address"
      },
      {
        "astId": 4925,
        "contract": "contracts/ForgeMaster.sol:ForgeMaster",
        "label": "_registries",
        "offset": 0,
        "slot": "108",
        "type": "t_struct(AddressSet)2993_storage"
      },
      {
        "astId": 4928,
        "contract": "contracts/ForgeMaster.sol:ForgeMaster",
        "label": "_modules",
        "offset": 0,
        "slot": "110",
        "type": "t_struct(AddressSet)2993_storage"
      },
      {
        "astId": 4932,
        "contract": "contracts/ForgeMaster.sol:ForgeMaster",
        "label": "_slugsToRegistry",
        "offset": 0,
        "slot": "112",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 4936,
        "contract": "contracts/ForgeMaster.sol:ForgeMaster",
        "label": "_registryToSlug",
        "offset": 0,
        "slot": "113",
        "type": "t_mapping(t_address,t_bytes32)"
      },
      {
        "astId": 4940,
        "contract": "contracts/ForgeMaster.sol:ForgeMaster",
        "label": "lastIndexing",
        "offset": 0,
        "slot": "114",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4944,
        "contract": "contracts/ForgeMaster.sol:ForgeMaster",
        "label": "flaggedRegistries",
        "offset": 0,
        "slot": "115",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4950,
        "contract": "contracts/ForgeMaster.sol:ForgeMaster",
        "label": "_flaggedTokens",
        "offset": 0,
        "slot": "116",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 4952,
        "contract": "contracts/ForgeMaster.sol:ForgeMaster",
        "label": "_erc721SlimImplementation",
        "offset": 0,
        "slot": "117",
        "type": "t_address"
      },
      {
        "astId": 4956,
        "contract": "contracts/ForgeMaster.sol:ForgeMaster",
        "label": "__gap",
        "offset": 0,
        "slot": "118",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(AddressSet)2993_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 2992,
            "contract": "contracts/ForgeMaster.sol:ForgeMaster",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2692_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2692_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 2687,
            "contract": "contracts/ForgeMaster.sol:ForgeMaster",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2691,
            "contract": "contracts/ForgeMaster.sol:ForgeMaster",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}